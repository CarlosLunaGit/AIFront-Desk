{"ast":null,"code":"import { http, HttpResponse } from 'msw';\n\n// Type definitions for our API\n\n// Mock data\nconst mockStats = {\n  activeGuests: 12,\n  availableRooms: 25,\n  pendingMessages: 5,\n  todayBookings: 8\n};\nconst mockMessages = [{\n  id: '1',\n  content: 'Hello, I would like to check in early',\n  type: 'inbound',\n  status: 'read',\n  timestamp: new Date().toISOString(),\n  sender: {\n    name: 'John Doe',\n    avatar: 'https://i.pravatar.cc/150?img=1'\n  }\n}, {\n  id: '2',\n  content: 'Of course! We can accommodate early check-in at 1 PM. Would that work for you?',\n  type: 'outbound',\n  status: 'delivered',\n  timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n  sender: {\n    name: 'Hotel Staff',\n    avatar: 'https://i.pravatar.cc/150?img=2'\n  }\n}];\n\n// Mock room data\nconst mockRooms = [{\n  id: '1',\n  number: '101',\n  type: 'standard',\n  status: 'available',\n  floor: 1,\n  features: ['wifi', 'minibar'],\n  capacity: 2,\n  rate: 100,\n  lastCleaned: '2024-03-09T10:00:00Z'\n}, {\n  id: '2',\n  number: '201',\n  type: 'deluxe',\n  status: 'occupied',\n  floor: 2,\n  features: ['wifi', 'minibar', 'balcony', 'ocean-view'],\n  capacity: 2,\n  rate: 200,\n  lastCleaned: '2024-03-08T15:00:00Z',\n  currentGuest: {\n    id: 'guest1',\n    name: 'John Doe',\n    checkIn: '2024-03-08T14:00:00Z',\n    checkOut: '2024-03-10T12:00:00Z'\n  }\n}\n// Add more mock rooms as needed\n];\nconst mockRoomActions = [{\n  id: '1',\n  roomId: '2',\n  type: 'cleaning',\n  status: 'pending',\n  requestedBy: 'ai',\n  requestedAt: '2024-03-09T09:00:00Z',\n  notes: 'Requested by AI based on guest check-out time'\n}];\nconst mockRoomStats = {\n  total: 50,\n  available: 30,\n  occupied: 15,\n  maintenance: 2,\n  cleaning: 3,\n  reserved: 0,\n  byType: {\n    standard: 30,\n    deluxe: 15,\n    suite: 4,\n    presidential: 1\n  },\n  byFloor: {\n    1: 10,\n    2: 10,\n    3: 10,\n    4: 10,\n    5: 10\n  },\n  occupancyRate: 0.3,\n  averageStayDuration: 2.5\n};\n// Mock hotel configuration\nlet mockHotelConfig = null;\n\n// Mock handlers\nexport const handlers = [\n// Dashboard stats\nhttp.get('/api/dashboard/stats', () => {\n  return HttpResponse.json(mockStats);\n}),\n// Messages\nhttp.get('/api/communications/:guestId', () => {\n  return HttpResponse.json(mockMessages);\n}),\n// Send message\nhttp.post('/api/communications/send', async ({\n  request\n}) => {\n  const body = await request.json();\n  const newMessage = {\n    id: Date.now().toString(),\n    content: body.content,\n    recipientId: body.recipientId,\n    type: body.type,\n    timestamp: new Date().toISOString(),\n    status: 'sent',\n    sender: {\n      id: '1',\n      name: 'Hotel Staff',\n      avatar: '/staff-avatar.png'\n    }\n  };\n  return HttpResponse.json(newMessage);\n}),\n// Auth endpoints\nhttp.post('/api/auth/login', async ({\n  request\n}) => {\n  const body = await request.json();\n  if (body.email === 'demo@hotel.com' && body.password === 'demo123') {\n    return HttpResponse.json({\n      token: 'mock-jwt-token',\n      user: {\n        id: '1',\n        name: 'Hotel Staff',\n        email: body.email,\n        role: 'staff'\n      }\n    });\n  }\n  return new HttpResponse(null, {\n    status: 401\n  });\n}), http.get('/api/auth/me', () => {\n  return HttpResponse.json({\n    id: '1',\n    email: 'demo@hotel.com',\n    name: 'Demo Hotel',\n    hotelName: 'Demo Hotel',\n    subscriptionTier: 'premium'\n  });\n}),\n// Room endpoints\nhttp.get('/api/rooms', ({\n  request\n}) => {\n  var _url$searchParams$get, _url$searchParams$get2, _url$searchParams$get3;\n  const url = new URL(request.url);\n  const status = (_url$searchParams$get = url.searchParams.get('status')) === null || _url$searchParams$get === void 0 ? void 0 : _url$searchParams$get.split(',');\n  const type = (_url$searchParams$get2 = url.searchParams.get('type')) === null || _url$searchParams$get2 === void 0 ? void 0 : _url$searchParams$get2.split(',');\n  const floor = (_url$searchParams$get3 = url.searchParams.get('floor')) === null || _url$searchParams$get3 === void 0 ? void 0 : _url$searchParams$get3.split(',').map(Number);\n  const searchTerm = url.searchParams.get('searchTerm');\n  let filteredRooms = [...mockRooms];\n  if (status) {\n    filteredRooms = filteredRooms.filter(room => status.includes(room.status));\n  }\n  if (type) {\n    filteredRooms = filteredRooms.filter(room => type.includes(room.type));\n  }\n  if (floor) {\n    filteredRooms = filteredRooms.filter(room => floor.includes(room.floor));\n  }\n  if (searchTerm) {\n    const term = searchTerm.toLowerCase();\n    filteredRooms = filteredRooms.filter(room => room.number.toLowerCase().includes(term) || room.type.toLowerCase().includes(term));\n  }\n  return HttpResponse.json(filteredRooms);\n}), http.get('/api/rooms/:id', ({\n  params\n}) => {\n  const room = mockRooms.find(r => r.id === params.id);\n  if (!room) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  return HttpResponse.json(room);\n}), http.patch('/api/rooms/:id', async ({\n  params,\n  request\n}) => {\n  const room = mockRooms.find(r => r.id === params.id);\n  if (!room) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const updates = await request.json();\n  const updatedRoom = {\n    ...room,\n    ...updates\n  };\n  const index = mockRooms.findIndex(r => r.id === params.id);\n  mockRooms[index] = updatedRoom;\n  return HttpResponse.json(updatedRoom);\n}), http.get('/api/rooms/stats', () => {\n  return HttpResponse.json(mockRoomStats);\n}),\n// Room actions endpoints\nhttp.get('/api/rooms/actions', () => {\n  return HttpResponse.json(mockRoomActions);\n}), http.post('/api/rooms/actions', async ({\n  request\n}) => {\n  const action = await request.json();\n  const newAction = {\n    id: Date.now().toString(),\n    ...action,\n    status: 'pending',\n    requestedBy: 'staff',\n    requestedAt: new Date().toISOString()\n  };\n  mockRoomActions.push(newAction);\n  return HttpResponse.json(newAction);\n}), http.patch('/api/rooms/actions/:id', async ({\n  params,\n  request\n}) => {\n  const action = mockRoomActions.find(a => a.id === params.id);\n  if (!action) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const updates = await request.json();\n  const updatedAction = {\n    ...action,\n    ...updates\n  };\n  const index = mockRoomActions.findIndex(a => a.id === params.id);\n  mockRoomActions[index] = updatedAction;\n  return HttpResponse.json(updatedAction);\n}), http.post('/api/rooms/:id/assign', async ({\n  params,\n  request\n}) => {\n  const room = mockRooms.find(r => r.id === params.id);\n  if (!room) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const {\n    guestId,\n    checkIn,\n    checkOut\n  } = await request.json();\n  const updatedRoom = {\n    ...room,\n    status: 'occupied',\n    currentGuest: {\n      id: guestId,\n      name: 'Guest Name',\n      // In real app, this would come from guest data\n      checkIn,\n      checkOut\n    }\n  };\n  const index = mockRooms.findIndex(r => r.id === params.id);\n  mockRooms[index] = updatedRoom;\n  return HttpResponse.json(updatedRoom);\n}),\n// Hotel configuration endpoints\nhttp.get('/api/hotel/config', () => {\n  if (!mockHotelConfig) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  return HttpResponse.json(mockHotelConfig);\n}), http.post('/api/hotel/config', async ({\n  request\n}) => {\n  const config = await request.json();\n  mockHotelConfig = {\n    id: '1',\n    ...config,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    ownerId: '1',\n    isActive: true\n  };\n  return HttpResponse.json(mockHotelConfig);\n}), http.put('/api/hotel/config', async ({\n  request\n}) => {\n  const config = await request.json();\n  if (!mockHotelConfig) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  mockHotelConfig = {\n    ...mockHotelConfig,\n    ...config,\n    updatedAt: new Date()\n  };\n  return HttpResponse.json(mockHotelConfig);\n})];","map":{"version":3,"names":["http","HttpResponse","mockStats","activeGuests","availableRooms","pendingMessages","todayBookings","mockMessages","id","content","type","status","timestamp","Date","toISOString","sender","name","avatar","now","mockRooms","number","floor","features","capacity","rate","lastCleaned","currentGuest","checkIn","checkOut","mockRoomActions","roomId","requestedBy","requestedAt","notes","mockRoomStats","total","available","occupied","maintenance","cleaning","reserved","byType","standard","deluxe","suite","presidential","byFloor","occupancyRate","averageStayDuration","mockHotelConfig","handlers","get","json","post","request","body","newMessage","toString","recipientId","email","password","token","user","role","hotelName","subscriptionTier","_url$searchParams$get","_url$searchParams$get2","_url$searchParams$get3","url","URL","searchParams","split","map","Number","searchTerm","filteredRooms","filter","room","includes","term","toLowerCase","params","find","r","patch","updates","updatedRoom","index","findIndex","action","newAction","push","a","updatedAction","guestId","config","createdAt","updatedAt","ownerId","isActive","put"],"sources":["C:/Users/CLIZARDE/2024/ProyectosPersonales/aiFront-Desk/frontend/src/mocks/handlers.ts"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\nimport type { HttpHandler } from 'msw';\r\nimport type { Room, RoomAction, RoomStats, RoomStatus } from '../types/room';\r\nimport type { HotelConfiguration, HotelConfigFormData, HotelConfigDocument } from '../types/hotel';\r\n\r\n// Type definitions for our API\r\ninterface MessageRequest {\r\n  content: string;\r\n  recipientId: string;\r\n  type: 'text' | 'image' | 'file';\r\n}\r\n\r\ninterface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n// Mock data\r\nconst mockStats = {\r\n  activeGuests: 12,\r\n  availableRooms: 25,\r\n  pendingMessages: 5,\r\n  todayBookings: 8,\r\n};\r\n\r\nconst mockMessages = [\r\n  {\r\n    id: '1',\r\n    content: 'Hello, I would like to check in early',\r\n    type: 'inbound',\r\n    status: 'read',\r\n    timestamp: new Date().toISOString(),\r\n    sender: {\r\n      name: 'John Doe',\r\n      avatar: 'https://i.pravatar.cc/150?img=1',\r\n    },\r\n  },\r\n  {\r\n    id: '2',\r\n    content: 'Of course! We can accommodate early check-in at 1 PM. Would that work for you?',\r\n    type: 'outbound',\r\n    status: 'delivered',\r\n    timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\r\n    sender: {\r\n      name: 'Hotel Staff',\r\n      avatar: 'https://i.pravatar.cc/150?img=2',\r\n    },\r\n  },\r\n];\r\n\r\n// Mock room data\r\nconst mockRooms: Room[] = [\r\n  {\r\n    id: '1',\r\n    number: '101',\r\n    type: 'standard',\r\n    status: 'available',\r\n    floor: 1,\r\n    features: ['wifi', 'minibar'],\r\n    capacity: 2,\r\n    rate: 100,\r\n    lastCleaned: '2024-03-09T10:00:00Z',\r\n  },\r\n  {\r\n    id: '2',\r\n    number: '201',\r\n    type: 'deluxe',\r\n    status: 'occupied',\r\n    floor: 2,\r\n    features: ['wifi', 'minibar', 'balcony', 'ocean-view'],\r\n    capacity: 2,\r\n    rate: 200,\r\n    lastCleaned: '2024-03-08T15:00:00Z',\r\n    currentGuest: {\r\n      id: 'guest1',\r\n      name: 'John Doe',\r\n      checkIn: '2024-03-08T14:00:00Z',\r\n      checkOut: '2024-03-10T12:00:00Z',\r\n    },\r\n  },\r\n  // Add more mock rooms as needed\r\n];\r\n\r\nconst mockRoomActions: RoomAction[] = [\r\n  {\r\n    id: '1',\r\n    roomId: '2',\r\n    type: 'cleaning',\r\n    status: 'pending',\r\n    requestedBy: 'ai',\r\n    requestedAt: '2024-03-09T09:00:00Z',\r\n    notes: 'Requested by AI based on guest check-out time',\r\n  },\r\n];\r\n\r\nconst mockRoomStats: RoomStats = {\r\n  total: 50,\r\n  available: 30,\r\n  occupied: 15,\r\n  maintenance: 2,\r\n  cleaning: 3,\r\n  reserved: 0,\r\n  byType: {\r\n    standard: 30,\r\n    deluxe: 15,\r\n    suite: 4,\r\n    presidential: 1,\r\n  },\r\n  byFloor: {\r\n    1: 10,\r\n    2: 10,\r\n    3: 10,\r\n    4: 10,\r\n    5: 10,\r\n  },\r\n  occupancyRate: 0.3,\r\n  averageStayDuration: 2.5,\r\n};\r\n\r\ninterface RoomUpdateRequest {\r\n  status?: RoomStatus;\r\n  type?: Room['type'];\r\n  features?: Room['features'];\r\n  capacity?: number;\r\n  rate?: number;\r\n  notes?: string;\r\n}\r\n\r\ninterface RoomActionRequest {\r\n  roomId: string;\r\n  type: RoomAction['type'];\r\n  notes?: string;\r\n}\r\n\r\ninterface RoomAssignRequest {\r\n  guestId: string;\r\n  checkIn: string;\r\n  checkOut: string;\r\n}\r\n\r\n// Mock hotel configuration\r\nlet mockHotelConfig: HotelConfigDocument | null = null;\r\n\r\n// Mock handlers\r\nexport const handlers: HttpHandler[] = [\r\n  // Dashboard stats\r\n  http.get('/api/dashboard/stats', () => {\r\n    return HttpResponse.json(mockStats);\r\n  }),\r\n\r\n  // Messages\r\n  http.get('/api/communications/:guestId', () => {\r\n    return HttpResponse.json(mockMessages);\r\n  }),\r\n\r\n  // Send message\r\n  http.post('/api/communications/send', async ({ request }) => {\r\n    const body = await request.json() as MessageRequest;\r\n    const newMessage = {\r\n      id: Date.now().toString(),\r\n      content: body.content,\r\n      recipientId: body.recipientId,\r\n      type: body.type,\r\n      timestamp: new Date().toISOString(),\r\n      status: 'sent',\r\n      sender: {\r\n        id: '1',\r\n        name: 'Hotel Staff',\r\n        avatar: '/staff-avatar.png'\r\n      }\r\n    };\r\n    return HttpResponse.json(newMessage);\r\n  }),\r\n\r\n  // Auth endpoints\r\n  http.post('/api/auth/login', async ({ request }) => {\r\n    const body = await request.json() as LoginRequest;\r\n    if (body.email === 'demo@hotel.com' && body.password === 'demo123') {\r\n      return HttpResponse.json({\r\n        token: 'mock-jwt-token',\r\n        user: {\r\n          id: '1',\r\n          name: 'Hotel Staff',\r\n          email: body.email,\r\n          role: 'staff'\r\n        }\r\n      });\r\n    }\r\n    return new HttpResponse(null, { status: 401 });\r\n  }),\r\n\r\n  http.get('/api/auth/me', () => {\r\n    return HttpResponse.json({\r\n      id: '1',\r\n      email: 'demo@hotel.com',\r\n      name: 'Demo Hotel',\r\n      hotelName: 'Demo Hotel',\r\n      subscriptionTier: 'premium',\r\n    });\r\n  }),\r\n\r\n  // Room endpoints\r\n  http.get('/api/rooms', ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const status = url.searchParams.get('status')?.split(',') as RoomStatus[];\r\n    const type = url.searchParams.get('type')?.split(',') as Room['type'][];\r\n    const floor = url.searchParams.get('floor')?.split(',').map(Number);\r\n    const searchTerm = url.searchParams.get('searchTerm');\r\n\r\n    let filteredRooms = [...mockRooms];\r\n\r\n    if (status) {\r\n      filteredRooms = filteredRooms.filter(room => status.includes(room.status));\r\n    }\r\n    if (type) {\r\n      filteredRooms = filteredRooms.filter(room => type.includes(room.type));\r\n    }\r\n    if (floor) {\r\n      filteredRooms = filteredRooms.filter(room => floor.includes(room.floor));\r\n    }\r\n    if (searchTerm) {\r\n      const term = searchTerm.toLowerCase();\r\n      filteredRooms = filteredRooms.filter(room => \r\n        room.number.toLowerCase().includes(term) ||\r\n        room.type.toLowerCase().includes(term)\r\n      );\r\n    }\r\n\r\n    return HttpResponse.json(filteredRooms);\r\n  }),\r\n\r\n  http.get('/api/rooms/:id', ({ params }) => {\r\n    const room = mockRooms.find(r => r.id === params.id);\r\n    if (!room) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    return HttpResponse.json(room);\r\n  }),\r\n\r\n  http.patch('/api/rooms/:id', async ({ params, request }) => {\r\n    const room = mockRooms.find(r => r.id === params.id);\r\n    if (!room) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n\r\n    const updates = await request.json() as RoomUpdateRequest;\r\n    const updatedRoom: Room = { ...room, ...updates };\r\n    const index = mockRooms.findIndex(r => r.id === params.id);\r\n    mockRooms[index] = updatedRoom;\r\n\r\n    return HttpResponse.json(updatedRoom);\r\n  }),\r\n\r\n  http.get('/api/rooms/stats', () => {\r\n    return HttpResponse.json(mockRoomStats);\r\n  }),\r\n\r\n  // Room actions endpoints\r\n  http.get('/api/rooms/actions', () => {\r\n    return HttpResponse.json(mockRoomActions);\r\n  }),\r\n\r\n  http.post('/api/rooms/actions', async ({ request }) => {\r\n    const action = await request.json() as RoomActionRequest;\r\n    const newAction: RoomAction = {\r\n      id: Date.now().toString(),\r\n      ...action,\r\n      status: 'pending',\r\n      requestedBy: 'staff',\r\n      requestedAt: new Date().toISOString(),\r\n    };\r\n    mockRoomActions.push(newAction);\r\n    return HttpResponse.json(newAction);\r\n  }),\r\n\r\n  http.patch('/api/rooms/actions/:id', async ({ params, request }) => {\r\n    const action = mockRoomActions.find(a => a.id === params.id);\r\n    if (!action) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n\r\n    const updates = await request.json() as Partial<RoomAction>;\r\n    const updatedAction: RoomAction = { ...action, ...updates };\r\n    const index = mockRoomActions.findIndex(a => a.id === params.id);\r\n    mockRoomActions[index] = updatedAction;\r\n\r\n    return HttpResponse.json(updatedAction);\r\n  }),\r\n\r\n  http.post('/api/rooms/:id/assign', async ({ params, request }) => {\r\n    const room = mockRooms.find(r => r.id === params.id);\r\n    if (!room) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n\r\n    const { guestId, checkIn, checkOut } = await request.json() as RoomAssignRequest;\r\n    const updatedRoom: Room = {\r\n      ...room,\r\n      status: 'occupied' as RoomStatus,\r\n      currentGuest: {\r\n        id: guestId,\r\n        name: 'Guest Name', // In real app, this would come from guest data\r\n        checkIn,\r\n        checkOut,\r\n      },\r\n    };\r\n\r\n    const index = mockRooms.findIndex(r => r.id === params.id);\r\n    mockRooms[index] = updatedRoom;\r\n\r\n    return HttpResponse.json(updatedRoom);\r\n  }),\r\n\r\n  // Hotel configuration endpoints\r\n  http.get('/api/hotel/config', () => {\r\n    if (!mockHotelConfig) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    return HttpResponse.json(mockHotelConfig);\r\n  }),\r\n\r\n  http.post('/api/hotel/config', async ({ request }) => {\r\n    const config = await request.json() as HotelConfigFormData;\r\n    mockHotelConfig = {\r\n      id: '1',\r\n      ...config,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n      ownerId: '1',\r\n      isActive: true,\r\n    } as HotelConfigDocument;\r\n    return HttpResponse.json(mockHotelConfig);\r\n  }),\r\n\r\n  http.put('/api/hotel/config', async ({ request }) => {\r\n    const config = await request.json() as HotelConfigFormData;\r\n    if (!mockHotelConfig) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    mockHotelConfig = {\r\n      ...mockHotelConfig,\r\n      ...config,\r\n      updatedAt: new Date(),\r\n    } as HotelConfigDocument;\r\n    return HttpResponse.json(mockHotelConfig);\r\n  }),\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}