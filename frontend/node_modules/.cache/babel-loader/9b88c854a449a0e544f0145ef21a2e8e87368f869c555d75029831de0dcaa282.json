{"ast":null,"code":"import { http, HttpResponse } from 'msw';\n\n// Type definitions for our API\n\n// Mock data\nconst mockStats = {\n  activeGuests: 12,\n  availableRooms: 25,\n  pendingMessages: 5,\n  todayBookings: 8\n};\nconst mockMessages = [{\n  id: '1',\n  content: 'Hello, I would like to check in early',\n  type: 'inbound',\n  status: 'read',\n  timestamp: new Date().toISOString(),\n  sender: {\n    name: 'John Doe',\n    avatar: 'https://i.pravatar.cc/150?img=1'\n  }\n}, {\n  id: '2',\n  content: 'Of course! We can accommodate early check-in at 1 PM. Would that work for you?',\n  type: 'outbound',\n  status: 'delivered',\n  timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n  sender: {\n    name: 'Hotel Staff',\n    avatar: 'https://i.pravatar.cc/150?img=2'\n  }\n}];\n\n// Mock room data\nconst mockRooms = [{\n  id: '1',\n  number: '101',\n  type: 'standard',\n  status: 'available',\n  floor: 1,\n  features: ['wifi', 'minibar'],\n  capacity: 2,\n  rate: 100,\n  lastCleaned: '2024-03-09T10:00:00Z'\n}, {\n  id: '2',\n  number: '201',\n  type: 'deluxe',\n  status: 'occupied',\n  floor: 2,\n  features: ['wifi', 'minibar', 'balcony', 'ocean-view'],\n  capacity: 2,\n  rate: 200,\n  lastCleaned: '2024-03-08T15:00:00Z',\n  currentGuest: {\n    id: 'guest1',\n    name: 'John Doe',\n    checkIn: '2024-03-08T14:00:00Z',\n    checkOut: '2024-03-10T12:00:00Z'\n  }\n}\n// Add more mock rooms as needed\n];\nconst mockRoomActions = [{\n  id: '1',\n  roomId: '2',\n  type: 'cleaning',\n  status: 'pending',\n  requestedBy: 'ai',\n  requestedAt: '2024-03-09T09:00:00Z',\n  notes: 'Requested by AI based on guest check-out time'\n}];\nconst mockRoomStats = {\n  total: 50,\n  available: 30,\n  occupied: 15,\n  maintenance: 2,\n  cleaning: 3,\n  reserved: 0,\n  byType: {\n    standard: 30,\n    deluxe: 15,\n    suite: 4,\n    presidential: 1\n  },\n  byFloor: {\n    1: 10,\n    2: 10,\n    3: 10,\n    4: 10,\n    5: 10\n  },\n  occupancyRate: 0.3,\n  averageStayDuration: 2.5\n};\n// Mock hotel configuration\nlet mockHotelConfig = {\n  id: '1',\n  name: 'Demo Hotel',\n  description: 'A luxurious hotel with modern amenities',\n  address: '123 Hotel Street, Demo City, DS 12345, Demo Country',\n  contactInfo: {\n    phone: '+1234567890',\n    email: 'contact@demohotel.com',\n    website: 'https://demohotel.com'\n  },\n  features: [\n  // Structural Features\n  {\n    id: '1',\n    name: 'WiFi',\n    description: 'High-speed wireless internet',\n    icon: 'wifi',\n    type: 'feature',\n    category: 'common'\n  }, {\n    id: '2',\n    name: 'Pool',\n    description: 'Outdoor swimming pool',\n    icon: 'pool',\n    type: 'feature',\n    category: 'common'\n  }, {\n    id: '3',\n    name: 'Spa',\n    description: 'Full-service spa',\n    icon: 'spa',\n    type: 'feature',\n    category: 'common'\n  }, {\n    id: '4',\n    name: 'Restaurant',\n    description: 'Fine dining restaurant',\n    icon: 'restaurant',\n    type: 'feature',\n    category: 'common'\n  }, {\n    id: '5',\n    name: 'Balcony',\n    description: 'Private balcony',\n    icon: 'balcony',\n    type: 'feature',\n    category: 'room'\n  }, {\n    id: '6',\n    name: 'Ocean View',\n    description: 'Scenic ocean view',\n    icon: 'visibility',\n    type: 'feature',\n    category: 'room'\n  },\n  // Amenities\n  {\n    id: '7',\n    name: 'Minibar',\n    description: 'In-room minibar',\n    icon: 'local_bar',\n    type: 'amenity',\n    category: 'room'\n  }, {\n    id: '8',\n    name: 'Room Service',\n    description: '24/7 room service',\n    icon: 'room_service',\n    type: 'amenity',\n    category: 'service'\n  }, {\n    id: '9',\n    name: 'Premium Toiletries',\n    description: 'Luxury bathroom amenities',\n    icon: 'spa',\n    type: 'amenity',\n    category: 'room'\n  }, {\n    id: '10',\n    name: 'Coffee Maker',\n    description: 'In-room coffee maker',\n    icon: 'coffee',\n    type: 'amenity',\n    category: 'room'\n  }, {\n    id: '11',\n    name: 'Daily Housekeeping',\n    description: 'Daily room cleaning service',\n    icon: 'cleaning_services',\n    type: 'amenity',\n    category: 'service'\n  }, {\n    id: '12',\n    name: 'Turndown Service',\n    description: 'Evening turndown service',\n    icon: 'hotel',\n    type: 'amenity',\n    category: 'service'\n  }],\n  roomTypes: [{\n    id: '1',\n    name: 'Standard Room',\n    description: 'Comfortable room with essential amenities',\n    baseRate: 100,\n    defaultCapacity: 2,\n    features: ['1', '5'],\n    // WiFi and Balcony\n    amenities: ['7', '9', '10', '11'] // Minibar, Premium Toiletries, Coffee Maker, Daily Housekeeping\n  }, {\n    id: '2',\n    name: 'Deluxe Room',\n    description: 'Spacious room with premium amenities',\n    baseRate: 200,\n    defaultCapacity: 2,\n    features: ['1', '5', '6'],\n    // WiFi, Balcony, Ocean View\n    amenities: ['7', '8', '9', '10', '11', '12'] // All amenities\n  }],\n  floors: [{\n    id: '1',\n    name: 'First Floor',\n    number: 1,\n    description: 'Ground floor with reception and common areas',\n    isActive: true\n  }, {\n    id: '2',\n    name: 'Second Floor',\n    number: 2,\n    description: 'Standard and deluxe rooms',\n    isActive: true\n  }],\n  roomTemplates: [{\n    id: '1',\n    typeId: '1',\n    floorId: '1',\n    name: 'Standard 101',\n    number: '101',\n    capacity: 2,\n    rate: 100,\n    features: ['1', '2'],\n    notes: 'Corner room with extra space'\n  }, {\n    id: '2',\n    typeId: '2',\n    floorId: '2',\n    name: 'Deluxe 201',\n    number: '201',\n    capacity: 2,\n    rate: 200,\n    features: ['1', '2', '3'],\n    notes: 'Ocean view room'\n  }],\n  settings: {\n    roomNumberingFormat: 'numeric',\n    defaultStatus: 'available',\n    currency: 'USD',\n    timezone: 'UTC',\n    checkInTime: '14:00',\n    checkOutTime: '12:00'\n  },\n  createdAt: new Date(),\n  updatedAt: new Date(),\n  ownerId: '1',\n  isActive: true\n};\n\n// Mock handlers\nexport const handlers = [\n// Dashboard stats\nhttp.get('/api/dashboard/stats', () => {\n  return HttpResponse.json(mockStats);\n}),\n// Messages\nhttp.get('/api/communications/:guestId', () => {\n  return HttpResponse.json(mockMessages);\n}),\n// Send message\nhttp.post('/api/communications/send', async ({\n  request\n}) => {\n  const body = await request.json();\n  const newMessage = {\n    id: Date.now().toString(),\n    content: body.content,\n    recipientId: body.recipientId,\n    type: body.type,\n    timestamp: new Date().toISOString(),\n    status: 'sent',\n    sender: {\n      id: '1',\n      name: 'Hotel Staff',\n      avatar: '/staff-avatar.png'\n    }\n  };\n  return HttpResponse.json(newMessage);\n}),\n// Auth endpoints\nhttp.post('/api/auth/login', async ({\n  request\n}) => {\n  const body = await request.json();\n  if (body.email === 'demo@hotel.com' && body.password === 'demo123') {\n    return HttpResponse.json({\n      token: 'mock-jwt-token',\n      user: {\n        id: '1',\n        name: 'Hotel Staff',\n        email: body.email,\n        role: 'staff'\n      }\n    });\n  }\n  return new HttpResponse(null, {\n    status: 401\n  });\n}), http.get('/api/auth/me', () => {\n  return HttpResponse.json({\n    id: '1',\n    email: 'demo@hotel.com',\n    name: 'Demo Hotel',\n    hotelName: 'Demo Hotel',\n    subscriptionTier: 'premium'\n  });\n}),\n// Room endpoints\nhttp.get('/api/rooms', ({\n  request\n}) => {\n  var _url$searchParams$get, _url$searchParams$get2, _url$searchParams$get3;\n  const url = new URL(request.url);\n  const status = (_url$searchParams$get = url.searchParams.get('status')) === null || _url$searchParams$get === void 0 ? void 0 : _url$searchParams$get.split(',');\n  const type = (_url$searchParams$get2 = url.searchParams.get('type')) === null || _url$searchParams$get2 === void 0 ? void 0 : _url$searchParams$get2.split(',');\n  const floor = (_url$searchParams$get3 = url.searchParams.get('floor')) === null || _url$searchParams$get3 === void 0 ? void 0 : _url$searchParams$get3.split(',').map(Number);\n  const searchTerm = url.searchParams.get('searchTerm');\n  let filteredRooms = [...mockRooms];\n  if (status) {\n    filteredRooms = filteredRooms.filter(room => status.includes(room.status));\n  }\n  if (type) {\n    filteredRooms = filteredRooms.filter(room => type.includes(room.type));\n  }\n  if (floor) {\n    filteredRooms = filteredRooms.filter(room => floor.includes(room.floor));\n  }\n  if (searchTerm) {\n    const term = searchTerm.toLowerCase();\n    filteredRooms = filteredRooms.filter(room => room.number.toLowerCase().includes(term) || room.type.toLowerCase().includes(term));\n  }\n  return HttpResponse.json(filteredRooms);\n}), http.get('/api/rooms/:id', ({\n  params\n}) => {\n  const room = mockRooms.find(r => r.id === params.id);\n  if (!room) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  return HttpResponse.json(room);\n}), http.patch('/api/rooms/:id', async ({\n  params,\n  request\n}) => {\n  const room = mockRooms.find(r => r.id === params.id);\n  if (!room) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const updates = await request.json();\n  const updatedRoom = {\n    ...room,\n    ...updates\n  };\n  const index = mockRooms.findIndex(r => r.id === params.id);\n  mockRooms[index] = updatedRoom;\n  return HttpResponse.json(updatedRoom);\n}), http.get('/api/rooms/stats', () => {\n  return HttpResponse.json(mockRoomStats);\n}),\n// Room actions endpoints\nhttp.get('/api/rooms/actions', () => {\n  return HttpResponse.json(mockRoomActions);\n}), http.post('/api/rooms/actions', async ({\n  request\n}) => {\n  const action = await request.json();\n  const newAction = {\n    id: Date.now().toString(),\n    ...action,\n    status: 'pending',\n    requestedBy: 'staff',\n    requestedAt: new Date().toISOString()\n  };\n  mockRoomActions.push(newAction);\n  return HttpResponse.json(newAction);\n}), http.patch('/api/rooms/actions/:id', async ({\n  params,\n  request\n}) => {\n  const action = mockRoomActions.find(a => a.id === params.id);\n  if (!action) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const updates = await request.json();\n  const updatedAction = {\n    ...action,\n    ...updates\n  };\n  const index = mockRoomActions.findIndex(a => a.id === params.id);\n  mockRoomActions[index] = updatedAction;\n  return HttpResponse.json(updatedAction);\n}), http.post('/api/rooms/:id/assign', async ({\n  params,\n  request\n}) => {\n  const room = mockRooms.find(r => r.id === params.id);\n  if (!room) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const {\n    guestId,\n    checkIn,\n    checkOut\n  } = await request.json();\n  const updatedRoom = {\n    ...room,\n    status: 'occupied',\n    currentGuest: {\n      id: guestId,\n      name: 'Guest Name',\n      // In real app, this would come from guest data\n      checkIn,\n      checkOut\n    }\n  };\n  const index = mockRooms.findIndex(r => r.id === params.id);\n  mockRooms[index] = updatedRoom;\n  return HttpResponse.json(updatedRoom);\n}),\n// Hotel configuration endpoints\nhttp.get('/api/hotel/config', () => {\n  if (!mockHotelConfig) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  // Convert Date objects to ISO strings for JSON response\n  const response = {\n    ...mockHotelConfig,\n    createdAt: mockHotelConfig.createdAt.toISOString(),\n    updatedAt: mockHotelConfig.updatedAt.toISOString()\n  };\n  return HttpResponse.json(response);\n}), http.post('/api/hotel/config', async ({\n  request\n}) => {\n  const data = await request.json();\n  const now = new Date();\n  mockHotelConfig = {\n    ...data,\n    id: '1',\n    createdAt: now,\n    updatedAt: now,\n    ownerId: '1',\n    isActive: true\n  };\n  // Convert Date objects to ISO strings for JSON response\n  const response = {\n    ...mockHotelConfig,\n    createdAt: mockHotelConfig.createdAt.toISOString(),\n    updatedAt: mockHotelConfig.updatedAt.toISOString()\n  };\n  return HttpResponse.json(response);\n}), http.patch('/api/hotel/config', async ({\n  request\n}) => {\n  if (!mockHotelConfig) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const updates = await request.json();\n  const now = new Date();\n  mockHotelConfig = {\n    ...mockHotelConfig,\n    ...updates,\n    updatedAt: now\n  };\n  // Convert Date objects to ISO strings for JSON response\n  const response = {\n    ...mockHotelConfig,\n    createdAt: mockHotelConfig.createdAt.toISOString(),\n    updatedAt: mockHotelConfig.updatedAt.toISOString()\n  };\n  return HttpResponse.json(response);\n})];","map":{"version":3,"names":["http","HttpResponse","mockStats","activeGuests","availableRooms","pendingMessages","todayBookings","mockMessages","id","content","type","status","timestamp","Date","toISOString","sender","name","avatar","now","mockRooms","number","floor","features","capacity","rate","lastCleaned","currentGuest","checkIn","checkOut","mockRoomActions","roomId","requestedBy","requestedAt","notes","mockRoomStats","total","available","occupied","maintenance","cleaning","reserved","byType","standard","deluxe","suite","presidential","byFloor","occupancyRate","averageStayDuration","mockHotelConfig","description","address","contactInfo","phone","email","website","icon","category","roomTypes","baseRate","defaultCapacity","amenities","floors","isActive","roomTemplates","typeId","floorId","settings","roomNumberingFormat","defaultStatus","currency","timezone","checkInTime","checkOutTime","createdAt","updatedAt","ownerId","handlers","get","json","post","request","body","newMessage","toString","recipientId","password","token","user","role","hotelName","subscriptionTier","_url$searchParams$get","_url$searchParams$get2","_url$searchParams$get3","url","URL","searchParams","split","map","Number","searchTerm","filteredRooms","filter","room","includes","term","toLowerCase","params","find","r","patch","updates","updatedRoom","index","findIndex","action","newAction","push","a","updatedAction","guestId","response","data"],"sources":["C:/Users/CLIZARDE/2024/ProyectosPersonales/aiFront-Desk/frontend/src/mocks/handlers.ts"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\nimport type { HttpHandler } from 'msw';\r\nimport type { Room, RoomAction, RoomStats, RoomStatus } from '../types/room';\r\nimport type { HotelConfiguration, HotelConfigFormData, HotelConfigDocument } from '../types/hotel';\r\n\r\n// Type definitions for our API\r\ninterface MessageRequest {\r\n  content: string;\r\n  recipientId: string;\r\n  type: 'text' | 'image' | 'file';\r\n}\r\n\r\ninterface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n// Mock data\r\nconst mockStats = {\r\n  activeGuests: 12,\r\n  availableRooms: 25,\r\n  pendingMessages: 5,\r\n  todayBookings: 8,\r\n};\r\n\r\nconst mockMessages = [\r\n  {\r\n    id: '1',\r\n    content: 'Hello, I would like to check in early',\r\n    type: 'inbound',\r\n    status: 'read',\r\n    timestamp: new Date().toISOString(),\r\n    sender: {\r\n      name: 'John Doe',\r\n      avatar: 'https://i.pravatar.cc/150?img=1',\r\n    },\r\n  },\r\n  {\r\n    id: '2',\r\n    content: 'Of course! We can accommodate early check-in at 1 PM. Would that work for you?',\r\n    type: 'outbound',\r\n    status: 'delivered',\r\n    timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\r\n    sender: {\r\n      name: 'Hotel Staff',\r\n      avatar: 'https://i.pravatar.cc/150?img=2',\r\n    },\r\n  },\r\n];\r\n\r\n// Mock room data\r\nconst mockRooms: Room[] = [\r\n  {\r\n    id: '1',\r\n    number: '101',\r\n    type: 'standard',\r\n    status: 'available',\r\n    floor: 1,\r\n    features: ['wifi', 'minibar'],\r\n    capacity: 2,\r\n    rate: 100,\r\n    lastCleaned: '2024-03-09T10:00:00Z',\r\n  },\r\n  {\r\n    id: '2',\r\n    number: '201',\r\n    type: 'deluxe',\r\n    status: 'occupied',\r\n    floor: 2,\r\n    features: ['wifi', 'minibar', 'balcony', 'ocean-view'],\r\n    capacity: 2,\r\n    rate: 200,\r\n    lastCleaned: '2024-03-08T15:00:00Z',\r\n    currentGuest: {\r\n      id: 'guest1',\r\n      name: 'John Doe',\r\n      checkIn: '2024-03-08T14:00:00Z',\r\n      checkOut: '2024-03-10T12:00:00Z',\r\n    },\r\n  },\r\n  // Add more mock rooms as needed\r\n];\r\n\r\nconst mockRoomActions: RoomAction[] = [\r\n  {\r\n    id: '1',\r\n    roomId: '2',\r\n    type: 'cleaning',\r\n    status: 'pending',\r\n    requestedBy: 'ai',\r\n    requestedAt: '2024-03-09T09:00:00Z',\r\n    notes: 'Requested by AI based on guest check-out time',\r\n  },\r\n];\r\n\r\nconst mockRoomStats: RoomStats = {\r\n  total: 50,\r\n  available: 30,\r\n  occupied: 15,\r\n  maintenance: 2,\r\n  cleaning: 3,\r\n  reserved: 0,\r\n  byType: {\r\n    standard: 30,\r\n    deluxe: 15,\r\n    suite: 4,\r\n    presidential: 1,\r\n  },\r\n  byFloor: {\r\n    1: 10,\r\n    2: 10,\r\n    3: 10,\r\n    4: 10,\r\n    5: 10,\r\n  },\r\n  occupancyRate: 0.3,\r\n  averageStayDuration: 2.5,\r\n};\r\n\r\ninterface RoomUpdateRequest {\r\n  status?: RoomStatus;\r\n  type?: Room['type'];\r\n  features?: Room['features'];\r\n  capacity?: number;\r\n  rate?: number;\r\n  notes?: string;\r\n}\r\n\r\ninterface RoomActionRequest {\r\n  roomId: string;\r\n  type: RoomAction['type'];\r\n  notes?: string;\r\n}\r\n\r\ninterface RoomAssignRequest {\r\n  guestId: string;\r\n  checkIn: string;\r\n  checkOut: string;\r\n}\r\n\r\n// Mock hotel configuration\r\nlet mockHotelConfig: HotelConfigDocument | null = {\r\n  id: '1',\r\n  name: 'Demo Hotel',\r\n  description: 'A luxurious hotel with modern amenities',\r\n  address: '123 Hotel Street, Demo City, DS 12345, Demo Country',\r\n  contactInfo: {\r\n    phone: '+1234567890',\r\n    email: 'contact@demohotel.com',\r\n    website: 'https://demohotel.com'\r\n  },\r\n  features: [\r\n    // Structural Features\r\n    { id: '1', name: 'WiFi', description: 'High-speed wireless internet', icon: 'wifi', type: 'feature', category: 'common' },\r\n    { id: '2', name: 'Pool', description: 'Outdoor swimming pool', icon: 'pool', type: 'feature', category: 'common' },\r\n    { id: '3', name: 'Spa', description: 'Full-service spa', icon: 'spa', type: 'feature', category: 'common' },\r\n    { id: '4', name: 'Restaurant', description: 'Fine dining restaurant', icon: 'restaurant', type: 'feature', category: 'common' },\r\n    { id: '5', name: 'Balcony', description: 'Private balcony', icon: 'balcony', type: 'feature', category: 'room' },\r\n    { id: '6', name: 'Ocean View', description: 'Scenic ocean view', icon: 'visibility', type: 'feature', category: 'room' },\r\n    \r\n    // Amenities\r\n    { id: '7', name: 'Minibar', description: 'In-room minibar', icon: 'local_bar', type: 'amenity', category: 'room' },\r\n    { id: '8', name: 'Room Service', description: '24/7 room service', icon: 'room_service', type: 'amenity', category: 'service' },\r\n    { id: '9', name: 'Premium Toiletries', description: 'Luxury bathroom amenities', icon: 'spa', type: 'amenity', category: 'room' },\r\n    { id: '10', name: 'Coffee Maker', description: 'In-room coffee maker', icon: 'coffee', type: 'amenity', category: 'room' },\r\n    { id: '11', name: 'Daily Housekeeping', description: 'Daily room cleaning service', icon: 'cleaning_services', type: 'amenity', category: 'service' },\r\n    { id: '12', name: 'Turndown Service', description: 'Evening turndown service', icon: 'hotel', type: 'amenity', category: 'service' }\r\n  ],\r\n  roomTypes: [\r\n    {\r\n      id: '1',\r\n      name: 'Standard Room',\r\n      description: 'Comfortable room with essential amenities',\r\n      baseRate: 100,\r\n      defaultCapacity: 2,\r\n      features: ['1', '5'], // WiFi and Balcony\r\n      amenities: ['7', '9', '10', '11'] // Minibar, Premium Toiletries, Coffee Maker, Daily Housekeeping\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Deluxe Room',\r\n      description: 'Spacious room with premium amenities',\r\n      baseRate: 200,\r\n      defaultCapacity: 2,\r\n      features: ['1', '5', '6'], // WiFi, Balcony, Ocean View\r\n      amenities: ['7', '8', '9', '10', '11', '12'] // All amenities\r\n    }\r\n  ],\r\n  floors: [\r\n    {\r\n      id: '1',\r\n      name: 'First Floor',\r\n      number: 1,\r\n      description: 'Ground floor with reception and common areas',\r\n      isActive: true\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Second Floor',\r\n      number: 2,\r\n      description: 'Standard and deluxe rooms',\r\n      isActive: true\r\n    }\r\n  ],\r\n  roomTemplates: [\r\n    {\r\n      id: '1',\r\n      typeId: '1',\r\n      floorId: '1',\r\n      name: 'Standard 101',\r\n      number: '101',\r\n      capacity: 2,\r\n      rate: 100,\r\n      features: ['1', '2'],\r\n      notes: 'Corner room with extra space'\r\n    },\r\n    {\r\n      id: '2',\r\n      typeId: '2',\r\n      floorId: '2',\r\n      name: 'Deluxe 201',\r\n      number: '201',\r\n      capacity: 2,\r\n      rate: 200,\r\n      features: ['1', '2', '3'],\r\n      notes: 'Ocean view room'\r\n    }\r\n  ],\r\n  settings: {\r\n    roomNumberingFormat: 'numeric',\r\n    defaultStatus: 'available',\r\n    currency: 'USD',\r\n    timezone: 'UTC',\r\n    checkInTime: '14:00',\r\n    checkOutTime: '12:00'\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n  ownerId: '1',\r\n  isActive: true\r\n};\r\n\r\n// Mock handlers\r\nexport const handlers: HttpHandler[] = [\r\n  // Dashboard stats\r\n  http.get('/api/dashboard/stats', () => {\r\n    return HttpResponse.json(mockStats);\r\n  }),\r\n\r\n  // Messages\r\n  http.get('/api/communications/:guestId', () => {\r\n    return HttpResponse.json(mockMessages);\r\n  }),\r\n\r\n  // Send message\r\n  http.post('/api/communications/send', async ({ request }) => {\r\n    const body = await request.json() as MessageRequest;\r\n    const newMessage = {\r\n      id: Date.now().toString(),\r\n      content: body.content,\r\n      recipientId: body.recipientId,\r\n      type: body.type,\r\n      timestamp: new Date().toISOString(),\r\n      status: 'sent',\r\n      sender: {\r\n        id: '1',\r\n        name: 'Hotel Staff',\r\n        avatar: '/staff-avatar.png'\r\n      }\r\n    };\r\n    return HttpResponse.json(newMessage);\r\n  }),\r\n\r\n  // Auth endpoints\r\n  http.post('/api/auth/login', async ({ request }) => {\r\n    const body = await request.json() as LoginRequest;\r\n    if (body.email === 'demo@hotel.com' && body.password === 'demo123') {\r\n      return HttpResponse.json({\r\n        token: 'mock-jwt-token',\r\n        user: {\r\n          id: '1',\r\n          name: 'Hotel Staff',\r\n          email: body.email,\r\n          role: 'staff'\r\n        }\r\n      });\r\n    }\r\n    return new HttpResponse(null, { status: 401 });\r\n  }),\r\n\r\n  http.get('/api/auth/me', () => {\r\n    return HttpResponse.json({\r\n      id: '1',\r\n      email: 'demo@hotel.com',\r\n      name: 'Demo Hotel',\r\n      hotelName: 'Demo Hotel',\r\n      subscriptionTier: 'premium',\r\n    });\r\n  }),\r\n\r\n  // Room endpoints\r\n  http.get('/api/rooms', ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const status = url.searchParams.get('status')?.split(',') as RoomStatus[];\r\n    const type = url.searchParams.get('type')?.split(',') as Room['type'][];\r\n    const floor = url.searchParams.get('floor')?.split(',').map(Number);\r\n    const searchTerm = url.searchParams.get('searchTerm');\r\n\r\n    let filteredRooms = [...mockRooms];\r\n\r\n    if (status) {\r\n      filteredRooms = filteredRooms.filter(room => status.includes(room.status));\r\n    }\r\n    if (type) {\r\n      filteredRooms = filteredRooms.filter(room => type.includes(room.type));\r\n    }\r\n    if (floor) {\r\n      filteredRooms = filteredRooms.filter(room => floor.includes(room.floor));\r\n    }\r\n    if (searchTerm) {\r\n      const term = searchTerm.toLowerCase();\r\n      filteredRooms = filteredRooms.filter(room => \r\n        room.number.toLowerCase().includes(term) ||\r\n        room.type.toLowerCase().includes(term)\r\n      );\r\n    }\r\n\r\n    return HttpResponse.json(filteredRooms);\r\n  }),\r\n\r\n  http.get('/api/rooms/:id', ({ params }) => {\r\n    const room = mockRooms.find(r => r.id === params.id);\r\n    if (!room) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    return HttpResponse.json(room);\r\n  }),\r\n\r\n  http.patch('/api/rooms/:id', async ({ params, request }) => {\r\n    const room = mockRooms.find(r => r.id === params.id);\r\n    if (!room) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n\r\n    const updates = await request.json() as RoomUpdateRequest;\r\n    const updatedRoom: Room = { ...room, ...updates };\r\n    const index = mockRooms.findIndex(r => r.id === params.id);\r\n    mockRooms[index] = updatedRoom;\r\n\r\n    return HttpResponse.json(updatedRoom);\r\n  }),\r\n\r\n  http.get('/api/rooms/stats', () => {\r\n    return HttpResponse.json(mockRoomStats);\r\n  }),\r\n\r\n  // Room actions endpoints\r\n  http.get('/api/rooms/actions', () => {\r\n    return HttpResponse.json(mockRoomActions);\r\n  }),\r\n\r\n  http.post('/api/rooms/actions', async ({ request }) => {\r\n    const action = await request.json() as RoomActionRequest;\r\n    const newAction: RoomAction = {\r\n      id: Date.now().toString(),\r\n      ...action,\r\n      status: 'pending',\r\n      requestedBy: 'staff',\r\n      requestedAt: new Date().toISOString(),\r\n    };\r\n    mockRoomActions.push(newAction);\r\n    return HttpResponse.json(newAction);\r\n  }),\r\n\r\n  http.patch('/api/rooms/actions/:id', async ({ params, request }) => {\r\n    const action = mockRoomActions.find(a => a.id === params.id);\r\n    if (!action) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n\r\n    const updates = await request.json() as Partial<RoomAction>;\r\n    const updatedAction: RoomAction = { ...action, ...updates };\r\n    const index = mockRoomActions.findIndex(a => a.id === params.id);\r\n    mockRoomActions[index] = updatedAction;\r\n\r\n    return HttpResponse.json(updatedAction);\r\n  }),\r\n\r\n  http.post('/api/rooms/:id/assign', async ({ params, request }) => {\r\n    const room = mockRooms.find(r => r.id === params.id);\r\n    if (!room) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n\r\n    const { guestId, checkIn, checkOut } = await request.json() as RoomAssignRequest;\r\n    const updatedRoom: Room = {\r\n      ...room,\r\n      status: 'occupied' as RoomStatus,\r\n      currentGuest: {\r\n        id: guestId,\r\n        name: 'Guest Name', // In real app, this would come from guest data\r\n        checkIn,\r\n        checkOut,\r\n      },\r\n    };\r\n\r\n    const index = mockRooms.findIndex(r => r.id === params.id);\r\n    mockRooms[index] = updatedRoom;\r\n\r\n    return HttpResponse.json(updatedRoom);\r\n  }),\r\n\r\n  // Hotel configuration endpoints\r\n  http.get('/api/hotel/config', () => {\r\n    if (!mockHotelConfig) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    // Convert Date objects to ISO strings for JSON response\r\n    const response = {\r\n      ...mockHotelConfig,\r\n      createdAt: mockHotelConfig.createdAt.toISOString(),\r\n      updatedAt: mockHotelConfig.updatedAt.toISOString()\r\n    };\r\n    return HttpResponse.json(response);\r\n  }),\r\n\r\n  http.post('/api/hotel/config', async ({ request }) => {\r\n    const data = await request.json() as HotelConfigFormData;\r\n    const now = new Date();\r\n    mockHotelConfig = {\r\n      ...data,\r\n      id: '1',\r\n      createdAt: now,\r\n      updatedAt: now,\r\n      ownerId: '1',\r\n      isActive: true\r\n    } as HotelConfigDocument;\r\n    // Convert Date objects to ISO strings for JSON response\r\n    const response = {\r\n      ...mockHotelConfig,\r\n      createdAt: mockHotelConfig.createdAt.toISOString(),\r\n      updatedAt: mockHotelConfig.updatedAt.toISOString()\r\n    };\r\n    return HttpResponse.json(response);\r\n  }),\r\n\r\n  http.patch('/api/hotel/config', async ({ request }) => {\r\n    if (!mockHotelConfig) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    const updates = await request.json() as Partial<HotelConfigFormData>;\r\n    const now = new Date();\r\n    mockHotelConfig = {\r\n      ...mockHotelConfig,\r\n      ...updates,\r\n      updatedAt: now\r\n    } as HotelConfigDocument;\r\n    // Convert Date objects to ISO strings for JSON response\r\n    const response = {\r\n      ...mockHotelConfig,\r\n      createdAt: mockHotelConfig.createdAt.toISOString(),\r\n      updatedAt: mockHotelConfig.updatedAt.toISOString()\r\n    };\r\n    return HttpResponse.json(response);\r\n  }),\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}