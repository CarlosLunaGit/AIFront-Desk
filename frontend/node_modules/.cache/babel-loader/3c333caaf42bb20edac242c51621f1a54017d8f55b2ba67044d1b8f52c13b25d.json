{"ast":null,"code":"import { http, HttpResponse } from 'msw';\n\n// Type definitions for our API\n\n// Mock data\nconst mockStats = {\n  activeGuests: 12,\n  availableRooms: 25,\n  pendingMessages: 5,\n  todayBookings: 8\n};\nconst mockMessages = [{\n  id: '1',\n  content: 'Hello, I would like to check in early',\n  type: 'inbound',\n  status: 'read',\n  timestamp: new Date().toISOString(),\n  sender: {\n    name: 'John Doe',\n    avatar: 'https://i.pravatar.cc/150?img=1'\n  }\n}, {\n  id: '2',\n  content: 'Of course! We can accommodate early check-in at 1 PM. Would that work for you?',\n  type: 'outbound',\n  status: 'delivered',\n  timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n  sender: {\n    name: 'Hotel Staff',\n    avatar: 'https://i.pravatar.cc/150?img=2'\n  }\n}];\n\n// Mock data for actual rooms\nconst mockRooms = [\n// Grand Plaza Hotel\n{\n  id: 'room-101',\n  number: '101',\n  typeId: 'type-1',\n  floorId: 'floor-1',\n  status: 'available',\n  features: ['feature-3'],\n  capacity: 2,\n  rate: 150,\n  notes: '',\n  hotelConfigId: 'mock-hotel-1'\n}, {\n  id: 'room-102',\n  number: '102',\n  typeId: 'type-1',\n  floorId: 'floor-1',\n  status: 'occupied',\n  features: ['feature-3'],\n  capacity: 2,\n  rate: 150,\n  notes: '',\n  hotelConfigId: 'mock-hotel-1'\n}, {\n  id: 'room-201',\n  number: '201',\n  typeId: 'type-2',\n  floorId: 'floor-2',\n  status: 'maintenance',\n  features: ['feature-4'],\n  capacity: 4,\n  rate: 400,\n  notes: '',\n  hotelConfigId: 'mock-hotel-1'\n},\n// Seaside Resort\n{\n  id: 'room-301',\n  number: '301',\n  typeId: 'type-4',\n  floorId: 'floor-3',\n  status: 'available',\n  features: ['feature-4'],\n  capacity: 2,\n  rate: 300,\n  notes: '',\n  hotelConfigId: 'mock-hotel-2'\n}, {\n  id: 'room-302',\n  number: '302',\n  typeId: 'type-4',\n  floorId: 'floor-4',\n  status: 'occupied',\n  features: ['feature-4'],\n  capacity: 2,\n  rate: 300,\n  notes: '',\n  hotelConfigId: 'mock-hotel-2'\n}, {\n  id: 'room-401',\n  number: '401',\n  typeId: 'type-5',\n  floorId: 'floor-3',\n  status: 'maintenance',\n  features: ['feature-4'],\n  capacity: 4,\n  rate: 600,\n  notes: '',\n  hotelConfigId: 'mock-hotel-2'\n}];\nconst mockRoomActions = [{\n  id: '1',\n  roomId: '2',\n  type: 'cleaning',\n  status: 'pending',\n  requestedBy: 'ai',\n  requestedAt: '2024-03-09T09:00:00Z',\n  notes: 'Requested by AI based on guest check-out time'\n}];\nconst mockRoomStats = {\n  total: 50,\n  available: 30,\n  occupied: 15,\n  maintenance: 2,\n  cleaning: 3,\n  reserved: 0,\n  byType: {\n    standard: 30,\n    deluxe: 15,\n    suite: 4,\n    presidential: 1\n  },\n  byFloor: {\n    1: 10,\n    2: 10,\n    3: 10,\n    4: 10,\n    5: 10\n  },\n  occupancyRate: 0.3,\n  averageStayDuration: 2.5\n};\n// Mock hotel configurations for testing\nconst mockHotelConfigs = [{\n  id: 'mock-hotel-1',\n  name: 'Grand Plaza Hotel',\n  description: 'A luxurious hotel in the heart of New York City',\n  address: '123 Main Street, New York, NY 10001, USA',\n  contactInfo: {\n    phone: '+1 (555) 123-4567',\n    email: 'info@grandplazahotel.com',\n    website: 'www.grandplazahotel.com'\n  },\n  features: [{\n    id: 'feature-1',\n    name: 'Swimming Pool',\n    description: 'Outdoor swimming pool with temperature control',\n    icon: 'pool',\n    type: 'amenity',\n    category: 'common'\n  }, {\n    id: 'feature-2',\n    name: 'Free WiFi',\n    description: 'High-speed internet access throughout the hotel',\n    icon: 'wifi',\n    type: 'amenity',\n    category: 'service'\n  }, {\n    id: 'feature-3',\n    name: 'Air Conditioning',\n    description: 'Individual climate control in all rooms',\n    icon: 'ac_unit',\n    type: 'feature',\n    category: 'room'\n  }],\n  floors: [{\n    id: 'floor-1',\n    number: 1,\n    name: 'Ground Floor',\n    description: 'Lobby and public areas',\n    isActive: true\n  }, {\n    id: 'floor-2',\n    number: 2,\n    name: 'Executive Floor',\n    description: 'Business rooms and suites',\n    isActive: true\n  }],\n  roomTypes: [{\n    id: 'type-1',\n    name: 'Standard Room',\n    description: 'Comfortable room with essential amenities',\n    baseRate: 150,\n    defaultCapacity: 2,\n    features: ['feature-3'],\n    amenities: ['feature-1', 'feature-2']\n  }, {\n    id: 'type-2',\n    name: 'Deluxe Room',\n    description: 'Spacious room with premium amenities',\n    baseRate: 250,\n    defaultCapacity: 2,\n    features: ['feature-3'],\n    amenities: ['feature-1', 'feature-2']\n  }, {\n    id: 'type-3',\n    name: 'Executive Suite',\n    description: 'Luxury suite with separate living area',\n    baseRate: 400,\n    defaultCapacity: 4,\n    features: ['feature-3'],\n    amenities: ['feature-1', 'feature-2']\n  }],\n  roomTemplates: [{\n    id: 'template-1',\n    typeId: 'type-1',\n    floorId: 'floor-1',\n    name: 'Standard Double',\n    capacity: 2,\n    features: ['feature-3'],\n    rate: 150,\n    notes: 'Corner room with extra space'\n  }, {\n    id: 'template-2',\n    typeId: 'type-2',\n    floorId: 'floor-1',\n    name: 'Deluxe King',\n    capacity: 2,\n    features: ['feature-3'],\n    rate: 250,\n    notes: 'Recently renovated'\n  }, {\n    id: 'template-3',\n    typeId: 'type-3',\n    floorId: 'floor-2',\n    name: 'Executive Suite',\n    capacity: 4,\n    features: ['feature-3'],\n    rate: 400,\n    notes: 'Panoramic city view'\n  }],\n  settings: {\n    roomNumberingFormat: 'numeric',\n    defaultStatus: 'available',\n    currency: 'USD',\n    timezone: 'America/New_York',\n    checkInTime: '15:00',\n    checkOutTime: '11:00'\n  },\n  createdAt: new Date('2024-01-01'),\n  updatedAt: new Date('2024-01-01'),\n  ownerId: 'owner-1',\n  isActive: true\n}, {\n  id: 'mock-hotel-2',\n  name: 'Seaside Resort',\n  description: 'A beautiful beachfront resort in Miami',\n  address: '456 Ocean Drive, Miami, FL 33139, USA',\n  contactInfo: {\n    phone: '+1 (555) 987-6543',\n    email: 'info@seasideresort.com',\n    website: 'www.seasideresort.com'\n  },\n  features: [{\n    id: 'feature-4',\n    name: 'Private Beach',\n    description: 'Exclusive beach access for guests',\n    icon: 'beach_access',\n    type: 'amenity',\n    category: 'common'\n  }, {\n    id: 'feature-5',\n    name: 'Spa',\n    description: 'Full-service spa and wellness center',\n    icon: 'spa',\n    type: 'amenity',\n    category: 'service'\n  }],\n  floors: [{\n    id: 'floor-3',\n    number: 1,\n    name: 'Beach Level',\n    description: 'Beach access and pool area',\n    isActive: true\n  }, {\n    id: 'floor-4',\n    number: 2,\n    name: 'Ocean View',\n    description: 'Rooms with ocean views',\n    isActive: true\n  }],\n  roomTypes: [{\n    id: 'type-4',\n    name: 'Ocean View Room',\n    description: 'Room with stunning ocean views',\n    baseRate: 300,\n    defaultCapacity: 2,\n    features: ['feature-4'],\n    amenities: ['feature-5']\n  }, {\n    id: 'type-5',\n    name: 'Beachfront Suite',\n    description: 'Luxury suite with private beach access',\n    baseRate: 600,\n    defaultCapacity: 4,\n    features: ['feature-4'],\n    amenities: ['feature-5']\n  }],\n  roomTemplates: [{\n    id: 'template-4',\n    typeId: 'type-4',\n    floorId: 'floor-4',\n    name: 'Ocean View King',\n    capacity: 2,\n    features: ['feature-4'],\n    rate: 300,\n    notes: 'Panoramic ocean view'\n  }, {\n    id: 'template-5',\n    typeId: 'type-5',\n    floorId: 'floor-3',\n    name: 'Beachfront Suite',\n    capacity: 4,\n    features: ['feature-4'],\n    rate: 600,\n    notes: 'Private beach access'\n  }],\n  settings: {\n    roomNumberingFormat: 'numeric',\n    defaultStatus: 'available',\n    currency: 'USD',\n    timezone: 'America/New_York',\n    checkInTime: '16:00',\n    checkOutTime: '12:00'\n  },\n  createdAt: new Date('2024-01-02'),\n  updatedAt: new Date('2024-01-02'),\n  ownerId: 'owner-1',\n  isActive: true\n}];\n\n// Track the current configuration\nlet currentConfigId = 'mock-hotel-1';\n\n// Mock handlers\nexport const handlers = [\n// Dashboard stats\nhttp.get('/api/dashboard/stats', () => {\n  return HttpResponse.json(mockStats);\n}),\n// Messages\nhttp.get('/api/communications/:guestId', () => {\n  return HttpResponse.json(mockMessages);\n}),\n// Send message\nhttp.post('/api/communications/send', async ({\n  request\n}) => {\n  const body = await request.json();\n  const newMessage = {\n    id: Date.now().toString(),\n    content: body.content,\n    recipientId: body.recipientId,\n    type: body.type,\n    timestamp: new Date().toISOString(),\n    status: 'sent',\n    sender: {\n      id: '1',\n      name: 'Hotel Staff',\n      avatar: '/staff-avatar.png'\n    }\n  };\n  return HttpResponse.json(newMessage);\n}),\n// Auth endpoints\nhttp.post('/api/auth/login', async ({\n  request\n}) => {\n  const body = await request.json();\n  if (body.email === 'demo@hotel.com' && body.password === 'demo123') {\n    return HttpResponse.json({\n      token: 'mock-jwt-token',\n      user: {\n        id: '1',\n        name: 'Hotel Staff',\n        email: body.email,\n        role: 'staff'\n      }\n    });\n  }\n  return new HttpResponse(null, {\n    status: 401\n  });\n}), http.get('/api/auth/me', () => {\n  return HttpResponse.json({\n    id: '1',\n    email: 'demo@hotel.com',\n    name: 'Demo Hotel',\n    hotelName: 'Demo Hotel',\n    subscriptionTier: 'premium'\n  });\n}),\n// Room endpoints\nhttp.get('/api/rooms', () => {\n  return HttpResponse.json(mockRooms.filter(r => r.hotelConfigId === currentConfigId));\n}), http.post('/api/rooms', async ({\n  request\n}) => {\n  const data = await request.json();\n  const safeData = data && typeof data === 'object' && !Array.isArray(data) ? data : {};\n  const newRoom = {\n    id: `room-${Date.now()}`,\n    number: typeof safeData.number === 'string' ? safeData.number : '',\n    typeId: typeof safeData.typeId === 'string' ? safeData.typeId : '',\n    floorId: typeof safeData.floorId === 'string' ? safeData.floorId : '',\n    status: typeof safeData.status === 'string' ? safeData.status : 'available',\n    features: Array.isArray(safeData.features) ? safeData.features : [],\n    capacity: typeof safeData.capacity === 'number' ? safeData.capacity : 1,\n    rate: typeof safeData.rate === 'number' ? safeData.rate : 0,\n    notes: typeof safeData.notes === 'string' ? safeData.notes : '',\n    hotelConfigId: currentConfigId\n  };\n  mockRooms.push(newRoom);\n  return HttpResponse.json(newRoom, {\n    status: 201\n  });\n}), http.patch('/api/rooms/:id', async ({\n  request,\n  params\n}) => {\n  const {\n    id\n  } = params;\n  const data = await request.json();\n  const safeData = data && typeof data === 'object' && !Array.isArray(data) ? data : {};\n  const idx = mockRooms.findIndex(r => r.id === id);\n  if (idx === -1) return new HttpResponse(null, {\n    status: 404\n  });\n  const updatedRoom = {\n    ...mockRooms[idx],\n    ...safeData,\n    notes: typeof safeData.notes === 'string' ? safeData.notes : mockRooms[idx].notes || ''\n  };\n  // Ensure notes is always a string\n  updatedRoom.notes = typeof updatedRoom.notes === 'string' ? updatedRoom.notes : '';\n  mockRooms[idx] = updatedRoom;\n  return HttpResponse.json(updatedRoom);\n}), http.get('/api/rooms/:id', ({\n  params\n}) => {\n  const room = mockRooms.find(r => r.id === params.id);\n  if (!room) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  return HttpResponse.json(room);\n}), http.get('/api/rooms/stats', () => {\n  return HttpResponse.json(mockRoomStats);\n}),\n// Room actions endpoints\nhttp.get('/api/rooms/actions', () => {\n  return HttpResponse.json(mockRoomActions);\n}), http.post('/api/rooms/actions', async ({\n  request\n}) => {\n  const action = await request.json();\n  const newAction = {\n    id: Date.now().toString(),\n    ...action,\n    status: 'pending',\n    requestedBy: 'staff',\n    requestedAt: new Date().toISOString()\n  };\n  mockRoomActions.push(newAction);\n  return HttpResponse.json(newAction);\n}), http.patch('/api/rooms/actions/:id', async ({\n  params,\n  request\n}) => {\n  const action = mockRoomActions.find(a => a.id === params.id);\n  if (!action) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const updates = await request.json();\n  const updatedAction = {\n    ...action,\n    ...updates\n  };\n  const index = mockRoomActions.findIndex(a => a.id === params.id);\n  mockRoomActions[index] = updatedAction;\n  return HttpResponse.json(updatedAction);\n}), http.post('/api/rooms/:id/assign', async ({\n  params,\n  request\n}) => {\n  const room = mockRooms.find(r => r.id === params.id);\n  if (!room) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const {\n    guestId,\n    checkIn,\n    checkOut\n  } = await request.json();\n  const updatedRoom = {\n    ...room,\n    status: 'occupied',\n    currentGuest: {\n      id: guestId,\n      name: 'Guest Name',\n      // In real app, this would come from guest data\n      checkIn,\n      checkOut\n    }\n  };\n  const index = mockRooms.findIndex(r => r.id === params.id);\n  mockRooms[index] = updatedRoom;\n  return HttpResponse.json(updatedRoom);\n}),\n// Mock GET /api/hotel/config/current\nhttp.get('/api/hotel/config/current', () => {\n  const currentConfig = mockHotelConfigs.find(config => config.id === currentConfigId);\n  if (!currentConfig) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  return HttpResponse.json(currentConfig);\n}),\n// Mock GET /api/hotel/config\nhttp.get('/api/hotel/config', () => {\n  return HttpResponse.json(mockHotelConfigs);\n}),\n// Mock GET /api/hotel/config/:id\nhttp.get('/api/hotel/config/:id', ({\n  params\n}) => {\n  if (params.id === 'current') {\n    const currentConfig = mockHotelConfigs.find(config => config.id === currentConfigId);\n    if (!currentConfig) {\n      return new HttpResponse(null, {\n        status: 404\n      });\n    }\n    return HttpResponse.json(currentConfig);\n  }\n  const config = mockHotelConfigs.find(config => config.id === params.id);\n  if (!config) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  return HttpResponse.json(config);\n}),\n// Mock POST /api/hotel/config\nhttp.post('/api/hotel/config', async ({\n  request\n}) => {\n  const data = await request.json();\n  const newConfig = {\n    id: `mock-hotel-${mockHotelConfigs.length + 1}`,\n    ...data,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    ownerId: 'owner-1',\n    isActive: true\n  };\n  mockHotelConfigs.push(newConfig);\n  return HttpResponse.json(newConfig);\n}),\n// Mock PATCH /api/hotel/config/:id\nhttp.patch('/api/hotel/config/:id', async ({\n  params,\n  request\n}) => {\n  const config = mockHotelConfigs.find(config => config.id === params.id);\n  if (!config) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  const updates = await request.json();\n  const updatedConfig = {\n    ...config,\n    ...updates,\n    updatedAt: new Date()\n  };\n  const index = mockHotelConfigs.findIndex(c => c.id === params.id);\n  mockHotelConfigs[index] = updatedConfig;\n  return HttpResponse.json(updatedConfig);\n}),\n// Mock POST /api/hotel/config/current\nhttp.post('/api/hotel/config/current', async ({\n  request\n}) => {\n  const {\n    configId\n  } = await request.json();\n  const config = mockHotelConfigs.find(config => config.id === configId);\n  if (!config) {\n    return new HttpResponse(null, {\n      status: 404\n    });\n  }\n  currentConfigId = configId;\n  return HttpResponse.json(config);\n}), http.post('/api/rooms/bulk', async ({\n  request\n}) => {\n  const data = await request.json();\n  if (!Array.isArray(data)) {\n    return new HttpResponse('Invalid payload', {\n      status: 400\n    });\n  }\n  const createdRooms = data.map(room => {\n    const newRoom = {\n      id: `room-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,\n      number: typeof room.number === 'string' ? room.number : '',\n      typeId: typeof room.typeId === 'string' ? room.typeId : '',\n      floorId: typeof room.floorId === 'string' ? room.floorId : '',\n      status: typeof room.status === 'string' ? room.status : 'available',\n      features: Array.isArray(room.features) ? room.features : [],\n      capacity: typeof room.capacity === 'number' ? room.capacity : 1,\n      rate: typeof room.rate === 'number' ? room.rate : 0,\n      notes: typeof room.notes === 'string' ? room.notes : '',\n      hotelConfigId: currentConfigId\n    };\n    mockRooms.push(newRoom);\n    return newRoom;\n  });\n  return HttpResponse.json(createdRooms, {\n    status: 201\n  });\n})];\n\n// Ensure all mockRooms have notes: '' if missing\nmockRooms.forEach(room => {\n  if (typeof room.notes !== 'string') room.notes = '';\n});","map":{"version":3,"names":["http","HttpResponse","mockStats","activeGuests","availableRooms","pendingMessages","todayBookings","mockMessages","id","content","type","status","timestamp","Date","toISOString","sender","name","avatar","now","mockRooms","number","typeId","floorId","features","capacity","rate","notes","hotelConfigId","mockRoomActions","roomId","requestedBy","requestedAt","mockRoomStats","total","available","occupied","maintenance","cleaning","reserved","byType","standard","deluxe","suite","presidential","byFloor","occupancyRate","averageStayDuration","mockHotelConfigs","description","address","contactInfo","phone","email","website","icon","category","floors","isActive","roomTypes","baseRate","defaultCapacity","amenities","roomTemplates","settings","roomNumberingFormat","defaultStatus","currency","timezone","checkInTime","checkOutTime","createdAt","updatedAt","ownerId","currentConfigId","handlers","get","json","post","request","body","newMessage","toString","recipientId","password","token","user","role","hotelName","subscriptionTier","filter","r","data","safeData","Array","isArray","newRoom","push","patch","params","idx","findIndex","updatedRoom","room","find","action","newAction","a","updates","updatedAction","index","guestId","checkIn","checkOut","currentGuest","currentConfig","config","newConfig","length","updatedConfig","c","configId","createdRooms","map","Math","random","slice","forEach"],"sources":["C:/Users/CLIZARDE/2024/ProyectosPersonales/aiFront-Desk/frontend/src/mocks/handlers.ts"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\nimport type { HttpHandler } from 'msw';\r\nimport type { Room, RoomAction, RoomStats, RoomStatus } from '../types/room';\r\nimport type { HotelConfiguration, HotelConfigDocument, HotelConfigFormData } from '../types/hotel';\r\n\r\n// Type definitions for our API\r\ninterface MessageRequest {\r\n  content: string;\r\n  recipientId: string;\r\n  type: 'text' | 'image' | 'file';\r\n}\r\n\r\ninterface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n// Mock data\r\nconst mockStats = {\r\n  activeGuests: 12,\r\n  availableRooms: 25,\r\n  pendingMessages: 5,\r\n  todayBookings: 8,\r\n};\r\n\r\nconst mockMessages = [\r\n  {\r\n    id: '1',\r\n    content: 'Hello, I would like to check in early',\r\n    type: 'inbound',\r\n    status: 'read',\r\n    timestamp: new Date().toISOString(),\r\n    sender: {\r\n      name: 'John Doe',\r\n      avatar: 'https://i.pravatar.cc/150?img=1',\r\n    },\r\n  },\r\n  {\r\n    id: '2',\r\n    content: 'Of course! We can accommodate early check-in at 1 PM. Would that work for you?',\r\n    type: 'outbound',\r\n    status: 'delivered',\r\n    timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\r\n    sender: {\r\n      name: 'Hotel Staff',\r\n      avatar: 'https://i.pravatar.cc/150?img=2',\r\n    },\r\n  },\r\n];\r\n\r\n// Mock data for actual rooms\r\nconst mockRooms = [\r\n  // Grand Plaza Hotel\r\n  {\r\n    id: 'room-101',\r\n    number: '101',\r\n    typeId: 'type-1',\r\n    floorId: 'floor-1',\r\n    status: 'available',\r\n    features: ['feature-3'],\r\n    capacity: 2,\r\n    rate: 150,\r\n    notes: '',\r\n    hotelConfigId: 'mock-hotel-1',\r\n  },\r\n  {\r\n    id: 'room-102',\r\n    number: '102',\r\n    typeId: 'type-1',\r\n    floorId: 'floor-1',\r\n    status: 'occupied',\r\n    features: ['feature-3'],\r\n    capacity: 2,\r\n    rate: 150,\r\n    notes: '',\r\n    hotelConfigId: 'mock-hotel-1',\r\n  },\r\n  {\r\n    id: 'room-201',\r\n    number: '201',\r\n    typeId: 'type-2',\r\n    floorId: 'floor-2',\r\n    status: 'maintenance',\r\n    features: ['feature-4'],\r\n    capacity: 4,\r\n    rate: 400,\r\n    notes: '',\r\n    hotelConfigId: 'mock-hotel-1',\r\n  },\r\n  // Seaside Resort\r\n  {\r\n    id: 'room-301',\r\n    number: '301',\r\n    typeId: 'type-4',\r\n    floorId: 'floor-3',\r\n    status: 'available',\r\n    features: ['feature-4'],\r\n    capacity: 2,\r\n    rate: 300,\r\n    notes: '',\r\n    hotelConfigId: 'mock-hotel-2',\r\n  },\r\n  {\r\n    id: 'room-302',\r\n    number: '302',\r\n    typeId: 'type-4',\r\n    floorId: 'floor-4',\r\n    status: 'occupied',\r\n    features: ['feature-4'],\r\n    capacity: 2,\r\n    rate: 300,\r\n    notes: '',\r\n    hotelConfigId: 'mock-hotel-2',\r\n  },\r\n  {\r\n    id: 'room-401',\r\n    number: '401',\r\n    typeId: 'type-5',\r\n    floorId: 'floor-3',\r\n    status: 'maintenance',\r\n    features: ['feature-4'],\r\n    capacity: 4,\r\n    rate: 600,\r\n    notes: '',\r\n    hotelConfigId: 'mock-hotel-2',\r\n  },\r\n];\r\n\r\nconst mockRoomActions: RoomAction[] = [\r\n  {\r\n    id: '1',\r\n    roomId: '2',\r\n    type: 'cleaning',\r\n    status: 'pending',\r\n    requestedBy: 'ai',\r\n    requestedAt: '2024-03-09T09:00:00Z',\r\n    notes: 'Requested by AI based on guest check-out time',\r\n  },\r\n];\r\n\r\nconst mockRoomStats: RoomStats = {\r\n  total: 50,\r\n  available: 30,\r\n  occupied: 15,\r\n  maintenance: 2,\r\n  cleaning: 3,\r\n  reserved: 0,\r\n  byType: {\r\n    standard: 30,\r\n    deluxe: 15,\r\n    suite: 4,\r\n    presidential: 1,\r\n  },\r\n  byFloor: {\r\n    1: 10,\r\n    2: 10,\r\n    3: 10,\r\n    4: 10,\r\n    5: 10,\r\n  },\r\n  occupancyRate: 0.3,\r\n  averageStayDuration: 2.5,\r\n};\r\n\r\ninterface RoomUpdateRequest {\r\n  status?: RoomStatus;\r\n  typeId?: string;\r\n  features?: string[];\r\n  capacity?: number;\r\n  rate?: number;\r\n  notes?: string;\r\n}\r\n\r\ninterface RoomActionRequest {\r\n  roomId: string;\r\n  type: RoomAction['type'];\r\n  notes?: string;\r\n}\r\n\r\ninterface RoomAssignRequest {\r\n  guestId: string;\r\n  checkIn: string;\r\n  checkOut: string;\r\n}\r\n\r\ninterface SetCurrentConfigRequest {\r\n  configId: string;\r\n}\r\n\r\n// Mock hotel configurations for testing\r\nconst mockHotelConfigs: HotelConfigDocument[] = [\r\n  {\r\n    id: 'mock-hotel-1',\r\n    name: 'Grand Plaza Hotel',\r\n    description: 'A luxurious hotel in the heart of New York City',\r\n    address: '123 Main Street, New York, NY 10001, USA',\r\n    contactInfo: {\r\n      phone: '+1 (555) 123-4567',\r\n      email: 'info@grandplazahotel.com',\r\n      website: 'www.grandplazahotel.com',\r\n    },\r\n    features: [\r\n      {\r\n        id: 'feature-1',\r\n        name: 'Swimming Pool',\r\n        description: 'Outdoor swimming pool with temperature control',\r\n        icon: 'pool',\r\n        type: 'amenity',\r\n        category: 'common',\r\n      },\r\n      {\r\n        id: 'feature-2',\r\n        name: 'Free WiFi',\r\n        description: 'High-speed internet access throughout the hotel',\r\n        icon: 'wifi',\r\n        type: 'amenity',\r\n        category: 'service',\r\n      },\r\n      {\r\n        id: 'feature-3',\r\n        name: 'Air Conditioning',\r\n        description: 'Individual climate control in all rooms',\r\n        icon: 'ac_unit',\r\n        type: 'feature',\r\n        category: 'room',\r\n      },\r\n    ],\r\n    floors: [\r\n      {\r\n        id: 'floor-1',\r\n        number: 1,\r\n        name: 'Ground Floor',\r\n        description: 'Lobby and public areas',\r\n        isActive: true,\r\n      },\r\n      {\r\n        id: 'floor-2',\r\n        number: 2,\r\n        name: 'Executive Floor',\r\n        description: 'Business rooms and suites',\r\n        isActive: true,\r\n      },\r\n    ],\r\n    roomTypes: [\r\n      {\r\n        id: 'type-1',\r\n        name: 'Standard Room',\r\n        description: 'Comfortable room with essential amenities',\r\n        baseRate: 150,\r\n        defaultCapacity: 2,\r\n        features: ['feature-3'],\r\n        amenities: ['feature-1', 'feature-2'],\r\n      },\r\n      {\r\n        id: 'type-2',\r\n        name: 'Deluxe Room',\r\n        description: 'Spacious room with premium amenities',\r\n        baseRate: 250,\r\n        defaultCapacity: 2,\r\n        features: ['feature-3'],\r\n        amenities: ['feature-1', 'feature-2'],\r\n      },\r\n      {\r\n        id: 'type-3',\r\n        name: 'Executive Suite',\r\n        description: 'Luxury suite with separate living area',\r\n        baseRate: 400,\r\n        defaultCapacity: 4,\r\n        features: ['feature-3'],\r\n        amenities: ['feature-1', 'feature-2'],\r\n      },\r\n    ],\r\n    roomTemplates: [\r\n      {\r\n        id: 'template-1',\r\n        typeId: 'type-1',\r\n        floorId: 'floor-1',\r\n        name: 'Standard Double',\r\n        capacity: 2,\r\n        features: ['feature-3'],\r\n        rate: 150,\r\n        notes: 'Corner room with extra space',\r\n      },\r\n      {\r\n        id: 'template-2',\r\n        typeId: 'type-2',\r\n        floorId: 'floor-1',\r\n        name: 'Deluxe King',\r\n        capacity: 2,\r\n        features: ['feature-3'],\r\n        rate: 250,\r\n        notes: 'Recently renovated',\r\n      },\r\n      {\r\n        id: 'template-3',\r\n        typeId: 'type-3',\r\n        floorId: 'floor-2',\r\n        name: 'Executive Suite',\r\n        capacity: 4,\r\n        features: ['feature-3'],\r\n        rate: 400,\r\n        notes: 'Panoramic city view',\r\n      },\r\n    ],\r\n    settings: {\r\n      roomNumberingFormat: 'numeric',\r\n      defaultStatus: 'available',\r\n      currency: 'USD',\r\n      timezone: 'America/New_York',\r\n      checkInTime: '15:00',\r\n      checkOutTime: '11:00',\r\n    },\r\n    createdAt: new Date('2024-01-01'),\r\n    updatedAt: new Date('2024-01-01'),\r\n    ownerId: 'owner-1',\r\n    isActive: true,\r\n  },\r\n  {\r\n    id: 'mock-hotel-2',\r\n    name: 'Seaside Resort',\r\n    description: 'A beautiful beachfront resort in Miami',\r\n    address: '456 Ocean Drive, Miami, FL 33139, USA',\r\n    contactInfo: {\r\n      phone: '+1 (555) 987-6543',\r\n      email: 'info@seasideresort.com',\r\n      website: 'www.seasideresort.com',\r\n    },\r\n    features: [\r\n      {\r\n        id: 'feature-4',\r\n        name: 'Private Beach',\r\n        description: 'Exclusive beach access for guests',\r\n        icon: 'beach_access',\r\n        type: 'amenity',\r\n        category: 'common',\r\n      },\r\n      {\r\n        id: 'feature-5',\r\n        name: 'Spa',\r\n        description: 'Full-service spa and wellness center',\r\n        icon: 'spa',\r\n        type: 'amenity',\r\n        category: 'service',\r\n      },\r\n    ],\r\n    floors: [\r\n      {\r\n        id: 'floor-3',\r\n        number: 1,\r\n        name: 'Beach Level',\r\n        description: 'Beach access and pool area',\r\n        isActive: true,\r\n      },\r\n      {\r\n        id: 'floor-4',\r\n        number: 2,\r\n        name: 'Ocean View',\r\n        description: 'Rooms with ocean views',\r\n        isActive: true,\r\n      },\r\n    ],\r\n    roomTypes: [\r\n      {\r\n        id: 'type-4',\r\n        name: 'Ocean View Room',\r\n        description: 'Room with stunning ocean views',\r\n        baseRate: 300,\r\n        defaultCapacity: 2,\r\n        features: ['feature-4'],\r\n        amenities: ['feature-5'],\r\n      },\r\n      {\r\n        id: 'type-5',\r\n        name: 'Beachfront Suite',\r\n        description: 'Luxury suite with private beach access',\r\n        baseRate: 600,\r\n        defaultCapacity: 4,\r\n        features: ['feature-4'],\r\n        amenities: ['feature-5'],\r\n      },\r\n    ],\r\n    roomTemplates: [\r\n      {\r\n        id: 'template-4',\r\n        typeId: 'type-4',\r\n        floorId: 'floor-4',\r\n        name: 'Ocean View King',\r\n        capacity: 2,\r\n        features: ['feature-4'],\r\n        rate: 300,\r\n        notes: 'Panoramic ocean view',\r\n      },\r\n      {\r\n        id: 'template-5',\r\n        typeId: 'type-5',\r\n        floorId: 'floor-3',\r\n        name: 'Beachfront Suite',\r\n        capacity: 4,\r\n        features: ['feature-4'],\r\n        rate: 600,\r\n        notes: 'Private beach access',\r\n      },\r\n    ],\r\n    settings: {\r\n      roomNumberingFormat: 'numeric',\r\n      defaultStatus: 'available',\r\n      currency: 'USD',\r\n      timezone: 'America/New_York',\r\n      checkInTime: '16:00',\r\n      checkOutTime: '12:00',\r\n    },\r\n    createdAt: new Date('2024-01-02'),\r\n    updatedAt: new Date('2024-01-02'),\r\n    ownerId: 'owner-1',\r\n    isActive: true,\r\n  },\r\n];\r\n\r\n// Track the current configuration\r\nlet currentConfigId = 'mock-hotel-1';\r\n\r\n// Mock handlers\r\nexport const handlers: HttpHandler[] = [\r\n  // Dashboard stats\r\n  http.get('/api/dashboard/stats', () => {\r\n    return HttpResponse.json(mockStats);\r\n  }),\r\n\r\n  // Messages\r\n  http.get('/api/communications/:guestId', () => {\r\n    return HttpResponse.json(mockMessages);\r\n  }),\r\n\r\n  // Send message\r\n  http.post('/api/communications/send', async ({ request }) => {\r\n    const body = await request.json() as MessageRequest;\r\n    const newMessage = {\r\n      id: Date.now().toString(),\r\n      content: body.content,\r\n      recipientId: body.recipientId,\r\n      type: body.type,\r\n      timestamp: new Date().toISOString(),\r\n      status: 'sent',\r\n      sender: {\r\n        id: '1',\r\n        name: 'Hotel Staff',\r\n        avatar: '/staff-avatar.png'\r\n      }\r\n    };\r\n    return HttpResponse.json(newMessage);\r\n  }),\r\n\r\n  // Auth endpoints\r\n  http.post('/api/auth/login', async ({ request }) => {\r\n    const body = await request.json() as LoginRequest;\r\n    if (body.email === 'demo@hotel.com' && body.password === 'demo123') {\r\n      return HttpResponse.json({\r\n        token: 'mock-jwt-token',\r\n        user: {\r\n          id: '1',\r\n          name: 'Hotel Staff',\r\n          email: body.email,\r\n          role: 'staff'\r\n        }\r\n      });\r\n    }\r\n    return new HttpResponse(null, { status: 401 });\r\n  }),\r\n\r\n  http.get('/api/auth/me', () => {\r\n    return HttpResponse.json({\r\n      id: '1',\r\n      email: 'demo@hotel.com',\r\n      name: 'Demo Hotel',\r\n      hotelName: 'Demo Hotel',\r\n      subscriptionTier: 'premium',\r\n    });\r\n  }),\r\n\r\n  // Room endpoints\r\n  http.get('/api/rooms', () => {\r\n    return HttpResponse.json(mockRooms.filter(r => r.hotelConfigId === currentConfigId));\r\n  }),\r\n\r\n  http.post('/api/rooms', async ({ request }) => {\r\n    const data = await request.json();\r\n    const safeData = (data && typeof data === 'object' && !Array.isArray(data)) ? data : {};\r\n    const newRoom = {\r\n      id: `room-${Date.now()}`,\r\n      number: typeof safeData.number === 'string' ? safeData.number : '',\r\n      typeId: typeof safeData.typeId === 'string' ? safeData.typeId : '',\r\n      floorId: typeof safeData.floorId === 'string' ? safeData.floorId : '',\r\n      status: typeof safeData.status === 'string' ? safeData.status : 'available',\r\n      features: Array.isArray(safeData.features) ? safeData.features : [],\r\n      capacity: typeof safeData.capacity === 'number' ? safeData.capacity : 1,\r\n      rate: typeof safeData.rate === 'number' ? safeData.rate : 0,\r\n      notes: typeof safeData.notes === 'string' ? safeData.notes : '',\r\n      hotelConfigId: currentConfigId,\r\n    };\r\n    mockRooms.push(newRoom);\r\n    return HttpResponse.json(newRoom, { status: 201 });\r\n  }),\r\n\r\n  http.patch('/api/rooms/:id', async ({ request, params }) => {\r\n    const { id } = params;\r\n    const data = await request.json();\r\n    const safeData = (data && typeof data === 'object' && !Array.isArray(data)) ? data : {};\r\n    const idx = mockRooms.findIndex(r => r.id === id);\r\n    if (idx === -1) return new HttpResponse(null, { status: 404 });\r\n    const updatedRoom = {\r\n      ...mockRooms[idx],\r\n      ...safeData,\r\n      notes: typeof safeData.notes === 'string' ? safeData.notes : (mockRooms[idx].notes || ''),\r\n    };\r\n    // Ensure notes is always a string\r\n    updatedRoom.notes = typeof updatedRoom.notes === 'string' ? updatedRoom.notes : '';\r\n    mockRooms[idx] = updatedRoom;\r\n    return HttpResponse.json(updatedRoom);\r\n  }),\r\n\r\n  http.get('/api/rooms/:id', ({ params }: any) => {\r\n    const room = mockRooms.find(r => r.id === params.id);\r\n    if (!room) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    return HttpResponse.json(room);\r\n  }),\r\n\r\n  http.get('/api/rooms/stats', () => {\r\n    return HttpResponse.json(mockRoomStats);\r\n  }),\r\n\r\n  // Room actions endpoints\r\n  http.get('/api/rooms/actions', () => {\r\n    return HttpResponse.json(mockRoomActions);\r\n  }),\r\n\r\n  http.post('/api/rooms/actions', async ({ request }: any) => {\r\n    const action = await request.json() as RoomActionRequest;\r\n    const newAction: RoomAction = {\r\n      id: Date.now().toString(),\r\n      ...action,\r\n      status: 'pending',\r\n      requestedBy: 'staff',\r\n      requestedAt: new Date().toISOString(),\r\n    };\r\n    mockRoomActions.push(newAction);\r\n    return HttpResponse.json(newAction);\r\n  }),\r\n\r\n  http.patch('/api/rooms/actions/:id', async ({ params, request }: any) => {\r\n    const action = mockRoomActions.find(a => a.id === params.id);\r\n    if (!action) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n\r\n    const updates = await request.json() as Partial<RoomAction>;\r\n    const updatedAction: RoomAction = { ...action, ...updates };\r\n    const index = mockRoomActions.findIndex(a => a.id === params.id);\r\n    mockRoomActions[index] = updatedAction;\r\n\r\n    return HttpResponse.json(updatedAction);\r\n  }),\r\n\r\n  http.post('/api/rooms/:id/assign', async ({ params, request }: any) => {\r\n    const room = mockRooms.find(r => r.id === params.id);\r\n    if (!room) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n\r\n    const { guestId, checkIn, checkOut } = await request.json() as RoomAssignRequest;\r\n    const updatedRoom: Room = {\r\n      ...room,\r\n      status: 'occupied' as RoomStatus,\r\n      currentGuest: {\r\n        id: guestId,\r\n        name: 'Guest Name', // In real app, this would come from guest data\r\n        checkIn,\r\n        checkOut,\r\n      },\r\n    };\r\n\r\n    const index = mockRooms.findIndex(r => r.id === params.id);\r\n    mockRooms[index] = updatedRoom;\r\n\r\n    return HttpResponse.json(updatedRoom);\r\n  }),\r\n\r\n  // Mock GET /api/hotel/config/current\r\n  http.get('/api/hotel/config/current', () => {\r\n    const currentConfig = mockHotelConfigs.find(config => config.id === currentConfigId);\r\n    if (!currentConfig) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    return HttpResponse.json(currentConfig);\r\n  }),\r\n\r\n  // Mock GET /api/hotel/config\r\n  http.get('/api/hotel/config', () => {\r\n    return HttpResponse.json(mockHotelConfigs);\r\n  }),\r\n\r\n  // Mock GET /api/hotel/config/:id\r\n  http.get('/api/hotel/config/:id', ({ params }: any) => {\r\n    if (params.id === 'current') {\r\n      const currentConfig = mockHotelConfigs.find(config => config.id === currentConfigId);\r\n      if (!currentConfig) {\r\n        return new HttpResponse(null, { status: 404 });\r\n      }\r\n      return HttpResponse.json(currentConfig);\r\n    }\r\n    const config = mockHotelConfigs.find(config => config.id === params.id);\r\n    if (!config) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    return HttpResponse.json(config);\r\n  }),\r\n\r\n  // Mock POST /api/hotel/config\r\n  http.post('/api/hotel/config', async ({ request }: any) => {\r\n    const data = await request.json() as HotelConfigFormData;\r\n    const newConfig: HotelConfigDocument = {\r\n      id: `mock-hotel-${mockHotelConfigs.length + 1}`,\r\n      ...data,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n      ownerId: 'owner-1',\r\n      isActive: true,\r\n    } as HotelConfigDocument;\r\n    mockHotelConfigs.push(newConfig);\r\n    return HttpResponse.json(newConfig);\r\n  }),\r\n\r\n  // Mock PATCH /api/hotel/config/:id\r\n  http.patch('/api/hotel/config/:id', async ({ params, request }: any) => {\r\n    const config = mockHotelConfigs.find(config => config.id === params.id);\r\n    if (!config) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    const updates = await request.json() as Partial<HotelConfigFormData>;\r\n    const updatedConfig = {\r\n      ...config,\r\n      ...updates,\r\n      updatedAt: new Date(),\r\n    } as HotelConfigDocument;\r\n    const index = mockHotelConfigs.findIndex(c => c.id === params.id);\r\n    mockHotelConfigs[index] = updatedConfig;\r\n    return HttpResponse.json(updatedConfig);\r\n  }),\r\n\r\n  // Mock POST /api/hotel/config/current\r\n  http.post('/api/hotel/config/current', async ({ request }: any) => {\r\n    const { configId } = await request.json() as SetCurrentConfigRequest;\r\n    const config = mockHotelConfigs.find(config => config.id === configId);\r\n    if (!config) {\r\n      return new HttpResponse(null, { status: 404 });\r\n    }\r\n    currentConfigId = configId;\r\n    return HttpResponse.json(config);\r\n  }),\r\n\r\n  http.post('/api/rooms/bulk', async ({ request }) => {\r\n    const data = await request.json();\r\n    if (!Array.isArray(data)) {\r\n      return new HttpResponse('Invalid payload', { status: 400 });\r\n    }\r\n    const createdRooms = data.map((room: any) => {\r\n      const newRoom = {\r\n        id: `room-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,\r\n        number: typeof room.number === 'string' ? room.number : '',\r\n        typeId: typeof room.typeId === 'string' ? room.typeId : '',\r\n        floorId: typeof room.floorId === 'string' ? room.floorId : '',\r\n        status: typeof room.status === 'string' ? room.status : 'available',\r\n        features: Array.isArray(room.features) ? room.features : [],\r\n        capacity: typeof room.capacity === 'number' ? room.capacity : 1,\r\n        rate: typeof room.rate === 'number' ? room.rate : 0,\r\n        notes: typeof room.notes === 'string' ? room.notes : '',\r\n        hotelConfigId: currentConfigId,\r\n      };\r\n      mockRooms.push(newRoom);\r\n      return newRoom;\r\n    });\r\n    return HttpResponse.json(createdRooms, { status: 201 });\r\n  }),\r\n];\r\n\r\n// Ensure all mockRooms have notes: '' if missing\r\nmockRooms.forEach(room => { if (typeof room.notes !== 'string') room.notes = ''; }); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}