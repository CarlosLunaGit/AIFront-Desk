{"ast":null,"code":"import axios from 'axios';\n\n// Get environment variables with fallbacks\nconst getEnvVar = (key, fallback) => {\n  // Check if we're in a browser environment\n  if (typeof window === 'undefined') {\n    return fallback;\n  }\n\n  // Try to get the environment variable\n  const value = import.meta.env[key];\n  if (value === undefined) {\n    console.warn(`Environment variable ${key} is not defined, using fallback: ${fallback}`);\n    return fallback;\n  }\n  return value;\n};\n\n// Check if we're in mock mode\nconst isMockMode = getEnvVar('VITE_ENABLE_MOCK_API', 'false') === 'true';\n\n// Create axios instance with default config\nexport const api = axios.create({\n  baseURL: isMockMode ? '' : getEnvVar('VITE_API_URL', 'http://localhost:3001'),\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for authentication and logging\napi.interceptors.request.use(config => {\n  // Add auth token if available\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Log request in development\n  if (process.env.NODE_ENV === 'development') {\n    var _config$method;\n    console.log(`üöÄ [${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()}] ${config.url}`, {\n      baseURL: config.baseURL,\n      headers: config.headers,\n      data: config.data\n    });\n  }\n  return config;\n});\n\n// Add response interceptor for error handling and logging\napi.interceptors.response.use(response => {\n  // Log response in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`‚úÖ [${response.status}] ${response.config.url}`, {\n      data: response.data\n    });\n  }\n  return response;\n}, async error => {\n  var _error$response3;\n  // Log error in development\n  if (process.env.NODE_ENV === 'development') {\n    var _error$response, _error$config, _error$response2;\n    console.error(`‚ùå [${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 'NO RESPONSE'}] ${(_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url}`, {\n      error: error.message,\n      response: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n    });\n  }\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    // Handle unauthorized access\n    localStorage.removeItem('auth_token');\n    window.location.href = '/login';\n  }\n\n  // Provide more helpful error messages in development\n  if (process.env.NODE_ENV === 'development' && !error.response) {\n    if (isMockMode) {\n      console.warn('‚ö†Ô∏è No response received. Make sure the mock service worker is running.');\n    } else {\n      console.warn('‚ö†Ô∏è No response received. Make sure the backend server is running at:', getEnvVar('VITE_API_URL', 'http://localhost:3001'));\n    }\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","getEnvVar","key","fallback","window","value","import","meta","env","undefined","console","warn","isMockMode","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","process","NODE_ENV","_config$method","log","method","toUpperCase","url","data","response","status","error","_error$response3","_error$response","_error$config","_error$response2","message","removeItem","location","href","Promise","reject"],"sources":["C:/Users/CLIZARDE/2024/ProyectosPersonales/aiFront-Desk/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Get environment variables with fallbacks\r\nconst getEnvVar = (key: keyof ImportMetaEnv, fallback: string): string => {\r\n  // Check if we're in a browser environment\r\n  if (typeof window === 'undefined') {\r\n    return fallback;\r\n  }\r\n\r\n  // Try to get the environment variable\r\n  const value = import.meta.env[key];\r\n  if (value === undefined) {\r\n    console.warn(`Environment variable ${key} is not defined, using fallback: ${fallback}`);\r\n    return fallback;\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\n// Check if we're in mock mode\r\nconst isMockMode = getEnvVar('VITE_ENABLE_MOCK_API', 'false') === 'true';\r\n\r\n// Create axios instance with default config\r\nexport const api = axios.create({\r\n  baseURL: isMockMode ? '' : getEnvVar('VITE_API_URL', 'http://localhost:3001'),\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor for authentication and logging\r\napi.interceptors.request.use((config) => {\r\n  // Add auth token if available\r\n  const token = localStorage.getItem('auth_token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n\r\n  // Log request in development\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log(`üöÄ [${config.method?.toUpperCase()}] ${config.url}`, {\r\n      baseURL: config.baseURL,\r\n      headers: config.headers,\r\n      data: config.data,\r\n    });\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\n// Add response interceptor for error handling and logging\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    // Log response in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`‚úÖ [${response.status}] ${response.config.url}`, {\r\n        data: response.data,\r\n      });\r\n    }\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    // Log error in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.error(`‚ùå [${error.response?.status || 'NO RESPONSE'}] ${error.config?.url}`, {\r\n        error: error.message,\r\n        response: error.response?.data,\r\n      });\r\n    }\r\n\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized access\r\n      localStorage.removeItem('auth_token');\r\n      window.location.href = '/login';\r\n    }\r\n\r\n    // Provide more helpful error messages in development\r\n    if (process.env.NODE_ENV === 'development' && !error.response) {\r\n      if (isMockMode) {\r\n        console.warn('‚ö†Ô∏è No response received. Make sure the mock service worker is running.');\r\n      } else {\r\n        console.warn('‚ö†Ô∏è No response received. Make sure the backend server is running at:', getEnvVar('VITE_API_URL', 'http://localhost:3001'));\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}