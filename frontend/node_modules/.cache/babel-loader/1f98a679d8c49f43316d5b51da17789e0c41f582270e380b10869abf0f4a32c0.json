{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CLIZARDE\\\\2024\\\\ProyectosPersonales\\\\aiFront-Desk\\\\frontend\\\\src\\\\index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Initialize MSW\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function enableMocking() {\n  var _import$meta$env;\n  // Check if mocking is enabled via environment variable\n  const shouldMock = ((_import$meta$env = import.meta.env) === null || _import$meta$env === void 0 ? void 0 : _import$meta$env.VITE_ENABLE_MOCK_API) === 'true' || process.env.NODE_ENV === 'development';\n  if (!shouldMock) {\n    console.log('Mock API is disabled. Using real API endpoints.');\n    return;\n  }\n  if (process.env.NODE_ENV !== 'development') {\n    console.log('Mock API is only available in development mode.');\n    return;\n  }\n  try {\n    const {\n      worker\n    } = await import('./mocks/browser');\n    await worker.start({\n      onUnhandledRequest: 'bypass' // Don't warn about unhandled requests\n    });\n    console.log('Mock API is enabled. Using mock endpoints.');\n  } catch (error) {\n    console.error('Failed to start mock service worker:', error);\n  }\n}\n\n// Start the app\nenableMocking().then(() => {\n  const root = ReactDOM.createRoot(document.getElementById('root'));\n  root.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this));\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","jsxDEV","_jsxDEV","enableMocking","_import$meta$env","shouldMock","import","meta","env","VITE_ENABLE_MOCK_API","process","NODE_ENV","console","log","worker","start","onUnhandledRequest","error","then","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/CLIZARDE/2024/ProyectosPersonales/aiFront-Desk/frontend/src/index.tsx"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Initialize MSW\nasync function enableMocking() {\n  // Check if mocking is enabled via environment variable\n  const shouldMock = import.meta.env?.VITE_ENABLE_MOCK_API === 'true' || process.env.NODE_ENV === 'development';\n  \n  if (!shouldMock) {\n    console.log('Mock API is disabled. Using real API endpoints.');\n    return;\n  }\n\n  if (process.env.NODE_ENV !== 'development') {\n    console.log('Mock API is only available in development mode.');\n    return;\n  }\n\n  try {\n    const { worker } = await import('./mocks/browser');\n    await worker.start({\n      onUnhandledRequest: 'bypass', // Don't warn about unhandled requests\n    });\n    console.log('Mock API is enabled. Using mock endpoints.');\n  } catch (error) {\n    console.error('Failed to start mock service worker:', error);\n  }\n}\n\n// Start the app\nenableMocking().then(() => {\n  const root = ReactDOM.createRoot(\n    document.getElementById('root') as HTMLElement\n  );\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAeC,aAAaA,CAAA,EAAG;EAAA,IAAAC,gBAAA;EAC7B;EACA,MAAMC,UAAU,GAAG,EAAAD,gBAAA,GAAAE,MAAM,CAACC,IAAI,CAACC,GAAG,cAAAJ,gBAAA,uBAAfA,gBAAA,CAAiBK,oBAAoB,MAAK,MAAM,IAAIC,OAAO,CAACF,GAAG,CAACG,QAAQ,KAAK,aAAa;EAE7G,IAAI,CAACN,UAAU,EAAE;IACfO,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAC9D;EACF;EAEA,IAAIH,OAAO,CAACF,GAAG,CAACG,QAAQ,KAAK,aAAa,EAAE;IAC1CC,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAC9D;EACF;EAEA,IAAI;IACF,MAAM;MAAEC;IAAO,CAAC,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC;IAClD,MAAMA,MAAM,CAACC,KAAK,CAAC;MACjBC,kBAAkB,EAAE,QAAQ,CAAE;IAChC,CAAC,CAAC;IACFJ,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;EAC3D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;EAC9D;AACF;;AAEA;AACAd,aAAa,CAAC,CAAC,CAACe,IAAI,CAAC,MAAM;EACzB,MAAMC,IAAI,GAAGrB,QAAQ,CAACsB,UAAU,CAC9BC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC;EACDH,IAAI,CAACI,MAAM,cACTrB,OAAA,CAACL,KAAK,CAAC2B,UAAU;IAAAC,QAAA,eACfvB,OAAA,CAACH,GAAG;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CACpB,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA7B,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}