{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { api } from './api';\n\n// API endpoints\nconst ROOMS_ENDPOINT = '/api/rooms';\nconst ROOM_ACTIONS_ENDPOINT = '/api/rooms/actions';\nconst ROOM_STATS_ENDPOINT = '/api/rooms/stats';\n\n// Room queries\nexport const useRooms = filter => {\n  _s();\n  return useQuery({\n    queryKey: ['rooms', (filter === null || filter === void 0 ? void 0 : filter.hotelConfigId) || ''],\n    queryFn: async () => {\n      const {\n        data\n      } = await api.get(ROOMS_ENDPOINT, {\n        params: filter\n      });\n      return data;\n    }\n  });\n};\n_s(useRooms, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useRoom = id => {\n  _s2();\n  return useQuery({\n    queryKey: ['rooms', id],\n    queryFn: async () => {\n      const {\n        data\n      } = await api.get(`${ROOMS_ENDPOINT}/${id}`);\n      return data;\n    }\n  });\n};\n_s2(useRoom, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useRoomStats = () => {\n  _s3();\n  return useQuery({\n    queryKey: ['rooms', 'stats'],\n    queryFn: async () => {\n      const {\n        data\n      } = await api.get(ROOM_STATS_ENDPOINT);\n      return data;\n    }\n  });\n};\n\n// Room mutations\n_s3(useRoomStats, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useUpdateRoom = () => {\n  _s4();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      id,\n      ...room\n    }) => {\n      const {\n        data\n      } = await api.patch(`${ROOMS_ENDPOINT}/${id}`, room);\n      return data;\n    },\n    onSuccess: updatedRoom => {\n      queryClient.setQueryData(['rooms', updatedRoom.id], updatedRoom);\n      queryClient.invalidateQueries({\n        queryKey: ['rooms']\n      });\n      queryClient.invalidateQueries({\n        queryKey: ['rooms', 'stats']\n      });\n    }\n  });\n};\n_s4(useUpdateRoom, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useCreateRoomAction = () => {\n  _s5();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async action => {\n      const {\n        data\n      } = await api.post(ROOM_ACTIONS_ENDPOINT, action);\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['rooms']\n      });\n      queryClient.invalidateQueries({\n        queryKey: ['rooms', 'actions']\n      });\n    }\n  });\n};\n_s5(useCreateRoomAction, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useUpdateRoomAction = () => {\n  _s6();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      id,\n      ...action\n    }) => {\n      const {\n        data\n      } = await api.patch(`${ROOM_ACTIONS_ENDPOINT}/${id}`, action);\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['rooms']\n      });\n      queryClient.invalidateQueries({\n        queryKey: ['rooms', 'actions']\n      });\n    }\n  });\n};\n\n// AI-specific mutations\n_s6(useUpdateRoomAction, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useAIAssignRoom = () => {\n  _s7();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      roomId,\n      guestId,\n      checkIn,\n      checkOut\n    }) => {\n      const {\n        data\n      } = await api.post(`${ROOMS_ENDPOINT}/${roomId}/assign`, {\n        guestId,\n        checkIn,\n        checkOut,\n        assignedBy: 'ai'\n      });\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['rooms']\n      });\n      queryClient.invalidateQueries({\n        queryKey: ['rooms', 'stats']\n      });\n    }\n  });\n};\n_s7(useAIAssignRoom, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useAIRequestCleaning = () => {\n  _s8();\n  return useCreateRoomAction();\n};\n_s8(useAIRequestCleaning, \"UuV99X/T9+Slsy9vih3aKkVDjmY=\", false, function () {\n  return [useCreateRoomAction];\n});\nexport const useAIRequestMaintenance = () => {\n  _s9();\n  return useCreateRoomAction();\n};\n_s9(useAIRequestMaintenance, \"UuV99X/T9+Slsy9vih3aKkVDjmY=\", false, function () {\n  return [useCreateRoomAction];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","api","ROOMS_ENDPOINT","ROOM_ACTIONS_ENDPOINT","ROOM_STATS_ENDPOINT","useRooms","filter","_s","queryKey","hotelConfigId","queryFn","data","get","params","useRoom","id","_s2","useRoomStats","_s3","useUpdateRoom","_s4","queryClient","mutationFn","room","patch","onSuccess","updatedRoom","setQueryData","invalidateQueries","useCreateRoomAction","_s5","action","post","useUpdateRoomAction","_s6","useAIAssignRoom","_s7","roomId","guestId","checkIn","checkOut","assignedBy","useAIRequestCleaning","_s8","useAIRequestMaintenance","_s9"],"sources":["C:/Users/CLIZARDE/2024/ProyectosPersonales/aiFront-Desk/frontend/src/services/roomService.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport type { Room, RoomAction, RoomFilter, RoomStats } from '../types/room';\r\nimport { api } from './api';\r\n\r\n// API endpoints\r\nconst ROOMS_ENDPOINT = '/api/rooms';\r\nconst ROOM_ACTIONS_ENDPOINT = '/api/rooms/actions';\r\nconst ROOM_STATS_ENDPOINT = '/api/rooms/stats';\r\n\r\n// Room queries\r\nexport const useRooms = (filter?: RoomFilter & { hotelConfigId?: string }) => {\r\n  return useQuery({\r\n    queryKey: ['rooms', filter?.hotelConfigId || ''],\r\n    queryFn: async () => {\r\n      const { data } = await api.get<Room[]>(ROOMS_ENDPOINT, { params: filter });\r\n      return data;\r\n    },\r\n  });\r\n};\r\n\r\nexport const useRoom = (id: string) => {\r\n  return useQuery({\r\n    queryKey: ['rooms', id],\r\n    queryFn: async () => {\r\n      const { data } = await api.get<Room>(`${ROOMS_ENDPOINT}/${id}`);\r\n      return data;\r\n    },\r\n  });\r\n};\r\n\r\nexport const useRoomStats = () => {\r\n  return useQuery({\r\n    queryKey: ['rooms', 'stats'],\r\n    queryFn: async () => {\r\n      const { data } = await api.get<RoomStats>(ROOM_STATS_ENDPOINT);\r\n      return data;\r\n    },\r\n  });\r\n};\r\n\r\n// Room mutations\r\nexport const useUpdateRoom = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: async ({ id, ...room }: Partial<Room> & { id: string }) => {\r\n      const { data } = await api.patch<Room>(`${ROOMS_ENDPOINT}/${id}`, room);\r\n      return data;\r\n    },\r\n    onSuccess: (updatedRoom) => {\r\n      queryClient.setQueryData(['rooms', updatedRoom.id], updatedRoom);\r\n      queryClient.invalidateQueries({ queryKey: ['rooms'] });\r\n      queryClient.invalidateQueries({ queryKey: ['rooms', 'stats'] });\r\n    },\r\n  });\r\n};\r\n\r\nexport const useCreateRoomAction = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: async (action: Omit<RoomAction, 'id' | 'requestedAt' | 'status'>) => {\r\n      const { data } = await api.post<RoomAction>(ROOM_ACTIONS_ENDPOINT, action);\r\n      return data;\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['rooms'] });\r\n      queryClient.invalidateQueries({ queryKey: ['rooms', 'actions'] });\r\n    },\r\n  });\r\n};\r\n\r\nexport const useUpdateRoomAction = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: async ({ id, ...action }: Partial<RoomAction> & { id: string }) => {\r\n      const { data } = await api.patch<RoomAction>(`${ROOM_ACTIONS_ENDPOINT}/${id}`, action);\r\n      return data;\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['rooms'] });\r\n      queryClient.invalidateQueries({ queryKey: ['rooms', 'actions'] });\r\n    },\r\n  });\r\n};\r\n\r\n// AI-specific mutations\r\nexport const useAIAssignRoom = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: async ({ roomId, guestId, checkIn, checkOut }: {\r\n      roomId: string;\r\n      guestId: string;\r\n      checkIn: string;\r\n      checkOut: string;\r\n    }) => {\r\n      const { data } = await api.post<Room>(`${ROOMS_ENDPOINT}/${roomId}/assign`, {\r\n        guestId,\r\n        checkIn,\r\n        checkOut,\r\n        assignedBy: 'ai',\r\n      });\r\n      return data;\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['rooms'] });\r\n      queryClient.invalidateQueries({ queryKey: ['rooms', 'stats'] });\r\n    },\r\n  });\r\n};\r\n\r\nexport const useAIRequestCleaning = () => {\r\n  return useCreateRoomAction();\r\n};\r\n\r\nexport const useAIRequestMaintenance = () => {\r\n  return useCreateRoomAction();\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}